"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–∑–∞–∏–º–Ω–æ–≥–æ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫.
"""

import telebot

from config import config

from bot.state_storage import state_storage
from bot import db
from bot.bot_instance import bot
from bot.keyboards import inline as inline_keyboards
from bot.keyboards import reply as keyboards
from bot.utils import decorators as decorators


@decorators.log_handler("rate_teammates")
def handle_rate_teammates(message: telebot.types.Message, ):
    """–ù–∞—á–∞–ª–æ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    if not config.features.enable_reviews:
        bot.send_message(message.chat.id, "‚ùå –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return

    student = db.student_get_by_tg_id(message.from_user.id)

    if not student or 'team' not in student:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    teammates_to_rate = db.student_get_teammates_not_rated(student['student_id'])

    if not teammates_to_rate:
        bot.send_message(message.chat.id,
            "‚úÖ –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª?\" —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏.",
        )
        return

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞
    teammate_names = [teammate['name'] for teammate in teammates_to_rate]

    state_storage.update_data(message.from_user.id, teammates_to_rate=teammates_to_rate)
    state_storage.set_state(message.from_user.id, "states.ReviewProcess.teammate_selection")

    bot.send_message(message.chat.id,
        "‚≠ê *–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=inline_keyboards.get_dynamic_inline_keyboard(teammate_names, "teammate", columns=2),
        parse_mode="Markdown",
    )


@decorators.log_handler("who_rated_me")
def handle_who_rated_me(message: telebot.types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ –æ—Ü–µ–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not config.features.enable_reviews:
        bot.send_message(message.chat.id, "‚ùå –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return

    student = db.student_get_by_tg_id(message.from_user.id)

    if not student or 'team' not in student:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ratings = db.rating_get_who_rated_me(student['student_id'])

    if not ratings:
        bot.send_message(message.chat.id,
            "‚≠ê –í–∞—Å –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª.\n\n"
            "–û—Ü–µ–Ω–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã "
            "–≤–æ—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π \"–û—Ü–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã\".",
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    teammates = db.student_get_teammates(student['student_id'])
    total_teammates = len(teammates)
    rated_count = len(ratings)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ü–µ–Ω–∏–≤—à–∏—Ö
    if not ratings:
        ratings_text = "‚≠ê –í–∞—Å –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª"
    else:
        ratings_text = "*–ú–µ–Ω—è –æ—Ü–µ–Ω–∏–ª–∏:*\n"
        for rating in ratings:
            # For MySQL version, we don't have datetime objects, so we need to handle this differently
            # Let's assume the date is already formatted as a string
            date_str = rating.get('rate_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            ratings_text += f"‚Ä¢ {rating['assessor_name']} ({date_str})\n"

    status_text = (
        f"*–°—Ç–∞—Ç—É—Å –æ—Ü–µ–Ω–æ–∫:*\n"
        f"‚úÖ –û—Ü–µ–Ω–∏–ª–∏: {rated_count}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {total_teammates - rated_count}\n"
        f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_teammates}\n\n"
    )

    full_text = status_text + ratings_text

    bot.send_message(message.chat.id, full_text, parse_mode="Markdown")


@decorators.log_handler("process_rating_input")
def process_rating_input(message: telebot.types.Message, ):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ü–µ–Ω–∫–∏"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        cancel_review(message)
        return

    try:
        rating = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id,
            f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {config.features.min_rating} –¥–æ {config.features.max_rating}:",
        )
        return

    if rating < config.features.min_rating or rating > config.features.max_rating:
        bot.send_message(message.chat.id,
            "‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç "
            f"{config.features.min_rating} –¥–æ {config.features.max_rating}. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
        )
        return

    state_storage.update_data(message.from_user.id, overall_rating=rating)
    state_storage.set_state(message.from_user.id, "states.ReviewProcess.advantages_input")

    bot.send_message(message.chat.id,
        f"‚úÖ –û—Ü–µ–Ω–∫–∞: {rating}/10\n\n"
        f"üëç *–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞*\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:",
        parse_mode="Markdown",
    )


@decorators.log_handler("process_advantages_input")
def process_advantages_input(message: telebot.types.Message, ):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        cancel_review(message)
        return

    advantages = message.text.strip() if message.text and message.text.strip() else ""

    if len(advantages) < 15:
        bot.send_message(message.chat.id,
            "‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "üëç –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –µ—â—ë —Ä–∞–∑:",
        )
        return

    if len(advantages) > 1000:
        bot.send_message(message.chat.id, "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    data = state_storage.get_data(message.from_user.id)
    state_storage.update_data(message.from_user.id, advantages=advantages)
    state_storage.set_state(message.from_user.id, "states.ReviewProcess.disadvantages_input")

    bot.send_message(message.chat.id,
        text=f"üìà *–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è*\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ {data['teammate_name']} –º–æ–≥ –±—ã —É–ª—É—á—à–∏—Ç—å:",
        parse_mode="Markdown",
    )


@decorators.log_handler("process_disadvantages_input")
def process_disadvantages_input(message: telebot.types.Message, ):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        cancel_review(message)
        return

    disadvantages = message.text.strip() if message.text and message.text.strip() else ""

    if len(disadvantages) < 15:
        bot.send_message(message.chat.id,
            "‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "üìà –ù–∞–ø–∏—à–∏—Ç–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –µ—â—ë —Ä–∞–∑:",
        )
        return

    if len(disadvantages) > 1000:
        bot.send_message(message.chat.id, "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    state_storage.update_data(message.from_user.id, disadvantages=disadvantages)
    state_storage.set_state(message.from_user.id, "states.ReviewProcess.confirmation")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
    data = state_storage.get_data(message.from_user.id)

    confirmation_text = (
        f"üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ü–µ–Ω–∫—É:*\n\n"
        f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {data['teammate_name']}\n"
        f"‚≠ê –û—Ü–µ–Ω–∫–∞: {data['overall_rating']}/10\n"
        f"üëç –ü–ª—é—Å—ã: {data['advantages'][:100]}{'...' if len(data['advantages']) > 100 else ''}\n"
        f"üìà –ß—Ç–æ —É–ª—É—á—à–∏—Ç—å: {disadvantages[:100]}{'...' if len(disadvantages) > 100 else ''}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É?"
    )

    bot.send_message(message.chat.id,
        confirmation_text,
        reply_markup=inline_keyboards.get_review_confirm_keyboard(),
        parse_mode="Markdown",
    )


@decorators.log_handler("confirm_review")
def confirm_review(message: telebot.types.Message, ):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏"""
    if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        student = db.student_get_by_tg_id(message.from_user.id)
        data = state_storage.get_data(message.from_user.id)

        try:
            db.rating_create(
                assessor_student_id=student['student_id'],
                assessored_student_id=data['selected_teammate_id'],
                overall_rating=data['overall_rating'],
                advantages=data['advantages'],
                disadvantages=data['disadvantages'],
            )

            state_storage.clear_state(message.from_user.id)

            bot.send_message(message.chat.id,
                f"‚úÖ *–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\n"
                f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {data['teammate_name']}\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {data['overall_rating']}/10",
                parse_mode="Markdown",
            )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–û—Ü–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"
            if config.features.enable_reviews:
                teammates_to_rate = db.student_get_teammates_not_rated(student['student_id'])

                if not teammates_to_rate:
                    bot.send_message(message.chat.id,
                        "‚úÖ –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã!\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª?\" —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏.",
                    )
                else:
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞
                    teammate_names = [teammate['name'] for teammate in teammates_to_rate]

                    state_storage.update_data(message.from_user.id, teammates_to_rate=teammates_to_rate)
                    state_storage.set_state(message.from_user.id, "states.ReviewProcess.teammate_selection")

                    keyboard = inline_keyboards.get_dynamic_inline_keyboard(
                        teammate_names, "teammate", columns=2,
                    )
                    bot.send_message(message.chat.id,
                        "‚≠ê *–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã*\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
                        reply_markup=keyboard,
                        parse_mode="Markdown",
                    )

        except Exception as e:
            bot.send_message(message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ü–µ–Ω–∫–∏: {e!s}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            )
            state_storage.clear_state(message.from_user.id)

    elif message.text == "–û—Ç–º–µ–Ω–∞":
        cancel_review(message)


def cancel_review(message: telebot.types.Message, ):
    """–û—Ç–º–µ–Ω–∞ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è"""
    state_storage.clear_state(message.from_user.id)
    student = db.student_get_by_tg_id(message.from_user.id)

    if student:
        has_team = 'team' in student
        is_admin = False
        if has_team:
            is_admin = student['team']['admin_student_id'] == student['student_id']

        keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
    else:
        keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)

    bot.send_message(message.chat.id, "‚ùå –û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)


def register_reviews_handlers(bot_instance: telebot.TeleBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è"""
    # FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –†–ï–ì–ò–°–¢–†–ò–†–£–Æ–¢–°–Ø –ü–ï–†–í–´–ú–ò

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –ü–û–°–õ–ï FSM)
    bot_instance.register_message_handler(handle_rate_teammates, func=lambda m: m.text == "–û—Ü–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã")
    bot_instance.register_message_handler(handle_who_rated_me, func=lambda m: m.text == "–ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª?")
