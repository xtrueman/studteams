"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

import telebot

from bot import db
from bot.bot_instance import bot
from bot.keyboards import inline as inline_keyboards
from bot.keyboards import reply as keyboards
from bot.state_storage import state_storage
from bot.utils import decorators as decorators
from bot.utils import helpers as helpers


def get_team_member_stats(member_id: int) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã.

    Args:
        member_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞
        reports = db.report_get_by_student(member_id)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏, –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        ratings_given = db.rating_get_given_by_student(member_id)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        ratings_received = db.rating_get_who_rated_me(member_id)

        # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏
        avg_rating = 0
        if ratings_received:
            total_rating = 0
            count = 0
            for rating in ratings_received:
                if isinstance(rating, dict):
                    total_rating += rating.get('overall_rating', 0)
                else:
                    total_rating += getattr(rating, 'overall_rating', 0)
                count += 1
            if count > 0:
                avg_rating = round(total_rating / count, 1)

        return {
            'success': True,
            'reports': reports,
            'reports_count': len(reports),
            'ratings_given': ratings_given,
            'ratings_given_count': len(ratings_given),
            'ratings_received': ratings_received,
            'ratings_received_count': len(ratings_received),
            'average_rating': avg_rating,
        }

    except Exception as e:
        return {
            'success': False,
            'error': str(e),
        }


def get_team_overall_stats(team_id: int) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã.

    Args:
        team_id: ID –∫–æ–º–∞–Ω–¥—ã

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫–æ–º–∞–Ω–¥—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        all_members = db.team_get_all_members(team_id)

        if not all_members:
            return {
                'success': False,
                'error': '–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
            }

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        team_stats = []

        for member in all_members:
            # –ü–æ–ª—É—á–∞–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞
            member_id = ""
            member_name = ""
            member_role = ""

            if isinstance(member, dict):
                member_id = member.get('student_id', '')
                member_name = member.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                member_role = member.get('role', '–£—á–∞—Å—Ç–Ω–∏–∫')
            else:
                member_id = getattr(member, 'student_id', '')
                member_name = getattr(member, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                member_role = getattr(member, 'role', '–£—á–∞—Å—Ç–Ω–∏–∫')

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º member_id –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            member_id_int = int(member_id) if isinstance(member_id, str) else member_id
            reports = db.report_get_by_student(member_id_int)
            reports_count = len(reports) if reports else 0

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫, –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            ratings_given = db.rating_get_given_by_student(member_id_int)
            ratings_given_count = len(ratings_given) if ratings_given else 0

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            ratings_received = db.rating_get_who_rated_me(member_id_int)
            ratings_received_count = len(ratings_received) if ratings_received else 0

            # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏
            avg_rating = 0
            if ratings_received:
                total_rating = 0
                count = 0
                for rating in ratings_received:
                    if isinstance(rating, dict):
                        total_rating += rating.get('overall_rating', 0)
                    else:
                        total_rating += getattr(rating, 'overall_rating', 0)
                    count += 1
                if count > 0:
                    avg_rating = round(total_rating / count, 1)

            team_stats.append({
                'name': member_name,
                'role': member_role,
                'reports_count': reports_count,
                'ratings_given_count': ratings_given_count,
                'ratings_received_count': ratings_received_count,
                'avg_rating': avg_rating,
            })

        return {
            'success': True,
            'members': all_members,
            'stats': team_stats,
        }

    except Exception as e:
        return {
            'success': False,
            'error': str(e),
        }


@decorators.log_handler("admin_panel")
def handle_admin_panel(message: telebot.types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ø–∏—Å–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö user_id

    keyboard = keyboards.get_admin_panel_keyboard()
    bot.send_message(message.chat.id,
        "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown",
    )


@decorators.log_handler("view_team_members")
def handle_view_team_members(message: telebot.types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    student = db.student_get_by_tg_id(message.from_user.id)

    if not student:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return

    # Check if student is in a team
    if 'team' not in student:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return

    # Check if user is admin
    if isinstance(student, dict) and 'team' in student:
        if isinstance(student['team'], dict) and 'admin_student_id' in student['team']:
            if student['team']['admin_student_id'] != student['student_id']:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
                return
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
            return
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # Get student ID safely
    student_id = ""
    if isinstance(student, dict):
        student_id = student.get('student_id', '')
    else:
        student_id = getattr(student, 'student_id', '')

    team_data = helpers.get_team_display_data(student_id, message.from_user.id)

    if not team_data:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return

    bot.send_message(message.chat.id, team_data['team_info'], parse_mode="Markdown", reply_markup=team_data['keyboard'])


@decorators.log_handler("remove_team_member")
def handle_remove_team_member(message: telebot.types.Message, ):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
    # This function is now handled through inline keyboards in the view_team_members function
    # We'll keep it for backward compatibility but redirect to view_team_members
    handle_view_team_members(message)


@decorators.log_handler("process_member_selection")
def process_member_selection(message: telebot.types.Message, ):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        cancel_admin_action(message)
        return

    data = state_storage.get_data(message.from_user.id)
    teammates = data.get('teammates', [])

    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    selected_member = None
    for teammate in teammates:
        # Ensure teammate is a dictionary
        if isinstance(teammate, dict):
            if teammate['name'] == message.text:
                selected_member = teammate
                break
        else:
            # Handle case where teammate might be a different type
            if getattr(teammate, 'name', '') == message.text:
                selected_member = teammate
                break

    if not selected_member:
        bot.send_message(message.chat.id, "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_storage.update_data(message.from_user.id, selected_member=selected_member)
    state_storage.set_state(message.from_user.id, "states.AdminActions.confirm_removal")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = keyboards.get_confirmation_keyboard("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∞")

    # Get name safely
    member_name = ""
    if isinstance(selected_member, dict):
        member_name = selected_member['name']
    else:
        member_name = getattr(selected_member, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    bot.send_message(message.chat.id,
        f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å *{member_name}* –∏–∑ –∫–æ–º–∞–Ω–¥—ã?\n\n"
        f"*–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!*",
        reply_markup=keyboard,
        parse_mode="Markdown",
    )


@decorators.log_handler("confirm_member_removal")
def confirm_member_removal(message: telebot.types.Message, ):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = state_storage.get_data(message.from_user.id)
        selected_member = data.get('selected_member')
        student = db.student_get_by_tg_id(message.from_user.id)

        if not selected_member or not student:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
            state_storage.clear_state(message.from_user.id)
            return

        try:
            # Get IDs safely
            team_id = ""
            student_id = ""

            if isinstance(student, dict) and 'team' in student:
                if isinstance(student['team'], dict):
                    team_id = student['team'].get('team_id', '')
                else:
                    team_id = getattr(student['team'], 'team_id', '')
            elif hasattr(student, 'team'):
                team_id = getattr(student['team'], 'team_id', '')

            if isinstance(selected_member, dict):
                student_id = selected_member.get('student_id', '')
            else:
                student_id = getattr(selected_member, 'student_id', '')

            # Convert to integers for database operations
            team_id_int = int(team_id) if str(team_id).isdigit() else 0
            student_id_int = int(student_id) if str(student_id).isdigit() else 0

            db.team_remove_member(
                team_id=team_id_int,
                student_id=student_id_int,
            )

            # Get name safely
            member_name = ""
            if isinstance(selected_member, dict):
                member_name = selected_member.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            else:
                member_name = getattr(selected_member, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            bot.send_message(message.chat.id,
                f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ *{member_name}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã!",
                parse_mode="Markdown",
            )

        except Exception as e:
            bot.send_message(message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e!s}",
            )

    elif message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    state_storage.clear_state(message.from_user.id)


@decorators.log_handler("view_member_stats")
def handle_view_member_stats(message: telebot.types.Message, ):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    student = db.student_get_by_tg_id(message.from_user.id)

    if not student or 'team' not in student:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
    if student['team']['admin_student_id'] != student['student_id']:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    teammates = db.student_get_teammates(student['student_id'])

    if not teammates:
        bot.send_message(message.chat.id, "üë• –í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_storage.update_data(message.from_user.id, teammates=teammates)
    state_storage.set_state(message.from_user.id, "states.AdminActions.select_member_stats")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    teammate_names = []
    for teammate in teammates:
        # Ensure teammate is a dictionary
        if isinstance(teammate, dict):
            teammate_names.append(teammate['name'])
        else:
            # Handle case where teammate might be a different type
            teammate_names.append(getattr(teammate, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))

    keyboard = inline_keyboards.get_dynamic_inline_keyboard(teammate_names, "member", columns=2)

    bot.send_message(message.chat.id,
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=keyboard,
        parse_mode="Markdown",
    )


@decorators.log_handler("process_member_stats_selection")
def process_member_stats_selection(message: telebot.types.Message, ):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        cancel_admin_action(message)
        return

    data = state_storage.get_data(message.from_user.id)
    teammates = data.get('teammates', [])

    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    selected_member = None
    for teammate in teammates:
        # Ensure teammate is a dictionary
        if isinstance(teammate, dict):
            if teammate['name'] == message.text:
                selected_member = teammate
                break
        else:
            # Handle case where teammate might be a different type
            if getattr(teammate, 'name', '') == message.text:
                selected_member = teammate
                break

    if not selected_member:
        bot.send_message(message.chat.id, "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        # Get ID safely
        member_id = ""
        if isinstance(selected_member, dict):
            member_id = selected_member['student_id']
        else:
            member_id = getattr(selected_member, 'student_id', '')

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = get_team_member_stats(member_id)

        if not stats['success']:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}")
            state_storage.clear_state(message.from_user.id)
            return

        # Get name safely
        member_name = ""
        if isinstance(selected_member, dict):
            member_name = selected_member['name']
        else:
            member_name = getattr(selected_member, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {member_name}*\n\n"

        # –û—Ç—á–µ—Ç—ã
        stats_text += "üìù *–û—Ç—á–µ—Ç—ã:*\n"
        if stats['reports']:
            stats_text += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['reports_count']}\n"
            sprint_numbers = []
            for report in stats['reports']:
                if isinstance(report, dict):
                    sprint_numbers.append(str(report['sprint_num']))
                else:
                    sprint_numbers.append(str(getattr(report, 'sprint_num', '')))
            stats_text += f"–°–ø—Ä–∏–Ω—Ç—ã: {', '.join(sprint_numbers)}\n\n"
        else:
            stats_text += "–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤\n\n"

        # –û—Ü–µ–Ω–∫–∏, –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º–∏
        stats_text += "‚≠ê *–û—Ü–µ–Ω–∫–∏, –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º–∏:*\n"
        if stats['ratings_received']:
            stats_text += f"–ü–æ–ª—É—á–µ–Ω–æ: {stats['ratings_received_count']}\n"
            stats_text += f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['average_rating']:.1f}/10\n\n"
        else:
            stats_text += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª\n\n"

        # –û—Ü–µ–Ω–∫–∏, –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        stats_text += "üë• *–û—Ü–µ–Ω–∫–∏, –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º:*\n"
        if stats['ratings_given']:
            stats_text += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['ratings_given_count']}\n"
        else:
            stats_text += "–ù–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –¥—Ä—É–≥–∏—Ö\n"

        bot.send_message(message.chat.id, stats_text, parse_mode="Markdown")

    except Exception as e:
        bot.send_message(message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e!s}",
        )

    state_storage.clear_state(message.from_user.id)


@decorators.log_handler("team_report")
def handle_team_report(message: telebot.types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á—ë—Ç–∞ –æ –∫–æ–º–∞–Ω–¥–µ"""
    student = db.student_get_by_tg_id(message.from_user.id)

    if not student or 'team' not in student:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    team_stats_result = get_team_overall_stats(student['team']['team_id'])

    if not team_stats_result['success']:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {team_stats_result['error']}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    report_text = f"üìä *–û—Ç—á—ë—Ç –æ –∫–æ–º–∞–Ω–¥–µ: {student['team']['team_name']}*\n\n"

    for stats in team_stats_result['stats']:
        report_text += f"üë§ {stats['name']} ({stats['role']})\n"
        report_text += f"   üìù –û—Ç—á–µ—Ç—ã: {stats['reports_count']}\n"
        report_text += f"   ‚≠ê –û—Ü–µ–Ω–∫–∏ –æ—Ç –º–µ–Ω—è: {stats['ratings_given_count']}\n"
        report_text += f"   üëÄ –û—Ü–µ–Ω–∫–∏ –º–Ω–µ: {stats['ratings_received_count']}"
        if stats['avg_rating'] > 0:
            report_text += f" (—Å—Ä–µ–¥–Ω—è—è: {stats['avg_rating']}/10)"
        report_text += "\n\n"

    bot.send_message(message.chat.id, report_text, parse_mode="Markdown")


def cancel_admin_action(message: telebot.types.Message, ):
    """–û—Ç–º–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    state_storage.clear_state(message.from_user.id)
    student = db.student_get_by_tg_id(message.from_user.id)

    if student:
        has_team = 'team' in student
        is_admin = False
        if has_team:
            is_admin = student['team']['admin_student_id'] == student['student_id']

        keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
    else:
        keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)

    bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)


def register_admin_handlers(bot_instance: telebot.TeleBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    bot_instance.register_message_handler(handle_admin_panel, func=lambda m: m.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    bot_instance.register_message_handler(handle_view_team_members, func=lambda m: m.text == "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
    bot_instance.register_message_handler(handle_view_member_stats, func=lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞")

    # FSM –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
