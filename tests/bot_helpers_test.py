"""
–¢–µ—Å—Ç—ã –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –∏–∑ bot/utils/helpers.py
"""

import datetime

from bot.utils import helpers


def test_is_valid_team_name():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    assert helpers.is_valid_team_name("–ö–æ–º–∞–Ω–¥–∞") is True
    assert helpers.is_valid_team_name("A" * 3) is True  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
    assert helpers.is_valid_team_name("A" * 64) is True  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    assert helpers.is_valid_team_name("AB") is False  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
    assert helpers.is_valid_team_name("A" * 65) is False  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    assert helpers.is_valid_team_name("") is False  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞


def test_is_valid_product_name():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    assert helpers.is_valid_product_name("–ü—Ä–æ–¥—É–∫—Ç") is True
    assert helpers.is_valid_product_name("A" * 3) is True  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
    assert helpers.is_valid_product_name("A" * 100) is True  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    assert helpers.is_valid_product_name("AB") is False  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
    assert helpers.is_valid_product_name("A" * 101) is False  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    assert helpers.is_valid_product_name("") is False  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞


def test_is_valid_group_number():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø
    assert helpers.is_valid_group_number("–ì–†–ü-01") is True
    assert helpers.is_valid_group_number("A" * 2) is True  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
    assert helpers.is_valid_group_number("A" * 16) is True  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø
    assert helpers.is_valid_group_number("A") is False  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
    assert helpers.is_valid_group_number("A" * 17) is False  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    assert helpers.is_valid_group_number("") is False  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞


def test_extract_sprint_number():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å–ø—Ä–∏–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã - —Ç–µ–ø–µ—Ä—å –∏–∑–≤–ª–µ–∫–∞–µ–º –ª—é–±–æ–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
    assert helpers.extract_sprint_number("–°–ø—Ä–∏–Ω—Ç ‚Ññ1") == 1
    assert helpers.extract_sprint_number("–°–ø—Ä–∏–Ω—Ç ‚Ññ10") == 10
    assert helpers.extract_sprint_number("–°–ø—Ä–∏–Ω—Ç ‚Ññ0") == 0
    # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —á–∏—Å–ª–æ
    assert helpers.extract_sprint_number("1") == 1
    assert helpers.extract_sprint_number("–¢–µ—Å—Ç 5 –Ω–æ–º–µ—Ä") == 5
    assert helpers.extract_sprint_number("–ù–æ–º–µ—Ä —Å–ø—Ä–∏–Ω—Ç–∞: 123") == 123
    assert helpers.extract_sprint_number("15 –∏ 20") == 15  # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã - –±–µ–∑ —á–∏—Å–µ–ª
    assert helpers.extract_sprint_number("–°–ø—Ä–∏–Ω—Ç") is None  # –ë–µ–∑ —á–∏—Å–µ–ª
    assert helpers.extract_sprint_number("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç") is None  # –ë–µ–∑ —á–∏—Å–µ–ª
    assert helpers.extract_sprint_number("") is None  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    assert helpers.extract_sprint_number("–¢–µ–∫—Å—Ç –±–µ–∑ —á–∏—Å–µ–ª") is None  # –ë–µ–∑ —á–∏—Å–µ–ª


def test_generate_invite_code():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤
    codes = [helpers.generate_invite_code() for _ in range(10)]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    for code in codes:
        assert len(code) == 8
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        assert '0' not in code
        assert 'O' not in code
        assert 'I' not in code
        assert 'l' not in code

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –¥—Ä—É–≥–æ–π –¥–ª–∏–Ω–æ–π
    code = helpers.generate_invite_code(12)
    assert len(code) == 12


def test_format_datetime():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    # –¢–µ—Å—Ç —Å "now"
    result = helpers.format_datetime("now")
    # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM
    assert isinstance(result, str)
    assert len(result) == 16  # –§–æ—Ä–º–∞—Ç DD.MM.YYYY HH:MM
    assert result[2] == '.'
    assert result[5] == '.'
    assert result[10] == ' '
    assert result[13] == ':'

    # –¢–µ—Å—Ç —Å datetime –æ–±—ä–µ–∫—Ç–æ–º
    dt = datetime.datetime(2023, 1, 15, 14, 30)
    result = helpers.format_datetime(dt)
    assert result == "15.01.2023 14:30"

    # –¢–µ—Å—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π ISO —Ñ–æ—Ä–º–∞—Ç–∞
    result = helpers.format_datetime("2023-01-15T14:30:00")
    assert result == "15.01.2023 14:30"

    # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    result = helpers.format_datetime("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
    assert result == "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"


def test_format_reports_list():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
    result = helpers.format_reports_list([])
    assert result == "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤."

    # –¢–µ—Å—Ç —Å –æ—Ç—á–µ—Ç–∞–º–∏
    reports = [
        {
            'sprint_num': 1,
            'report_date': datetime.datetime(2023, 1, 15, 14, 30),
            'report_text': '–¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–≤—ã–π —Å–ø—Ä–∏–Ω—Ç',
        },
        {
            'sprint_num': 2,
            'report_date': '2023-01-22T14:30:00',
            'report_text': '–¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤—Ç–æ—Ä–æ–π —Å–ø—Ä–∏–Ω—Ç',
        },
    ]

    result = helpers.format_reports_list(reports)
    assert "*–ú–æ–∏ –æ—Ç—á—ë—Ç—ã:*" in result
    assert "üìä –°–ø—Ä–∏–Ω—Ç ‚Ññ1 (15.01.2023 14:30)" in result
    assert "–¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–≤—ã–π —Å–ø—Ä–∏–Ω—Ç" in result
    assert "üìä –°–ø—Ä–∏–Ω—Ç ‚Ññ2" in result


def test_format_team_info():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    team = {
        'team_name': '–ö–æ–º–∞–Ω–¥–∞ –ê',
        'product_name': '–ü—Ä–æ–¥—É–∫—Ç –ë',
        'invite_code': 'INV123',
    }

    members = [
        {'name': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', 'role': 'Scrum Master'},
        {'name': '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', 'role': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'},
    ]

    # –¢–µ–ø–µ—Ä—å —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞
    result = helpers.format_team_info(team, members)

    assert "–ö–æ–º–∞–Ω–¥–∞: *¬´–ö–æ–º–∞–Ω–¥–∞ –ê¬ª*" in result
    assert "üì± –ü—Ä–æ–¥—É–∫—Ç: ¬´–ü—Ä–æ–¥—É–∫—Ç –ë¬ª" in result
    assert "üîó *–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:*" in result
    assert "*–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã:*" in result
    assert "‚Ä¢ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ (Scrum Master)" in result
    assert "‚Ä¢ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤ (–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫)" in result


def test_get_invite_link_text():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å —Å—Å—ã–ª–∫–æ–π-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º"""
    # –ë–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    result = helpers.get_invite_link_text("–ö–æ–º–∞–Ω–¥–∞ –ê", "INV123")
    assert "üîó *–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:*" in result
    assert "`https://t.me/@SSAU_SoftDevMgmt_bot?start=INV123`" in result

    # –° –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    result = helpers.get_invite_link_text("–ö–æ–º–∞–Ω–¥–∞ –ê", "INV123", True)
    assert "üîó *–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:*" in result
    assert "`https://t.me/@SSAU_SoftDevMgmt_bot?start=INV123`" in result
    assert "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É" in result
