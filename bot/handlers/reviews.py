"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–∑–∞–∏–º–Ω–æ–≥–æ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫.
"""

import aiogram
import aiogram.filters
import aiogram.fsm.context
import config
from aiogram import F

import bot.database.queries as queries
import bot.keyboards.inline as inline_keyboards
import bot.keyboards.reply as keyboards
import bot.states.user_states as states
import bot.utils.decorators as decorators
import bot.utils.helpers as helpers


@decorators.log_handler("rate_teammates")
async def handle_rate_teammates(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    if not config.ENABLE_REVIEWS:
        await message.answer("‚ùå –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return
    
    student = await queries.StudentQueries.get_by_tg_id(message.from_user.id)
    
    if not student or not getattr(student, 'team_memberships', None):
        await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    teammates_to_rate = await queries.StudentQueries.get_teammates_not_rated(student.id)
    
    if not teammates_to_rate:
        await message.answer(
            "‚úÖ –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª?\" —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞
    teammate_names = [teammate.name for teammate in teammates_to_rate]
    
    await state.update_data(teammates_to_rate=teammates_to_rate)
    await state.set_state(states.ReviewProcess.teammate_selection)
    
    await message.answer(
        "‚≠ê *–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=inline_keyboards.get_dynamic_inline_keyboard(teammate_names, "teammate", columns=2),
        parse_mode="Markdown"
    )


@decorators.log_handler("who_rated_me")
async def handle_who_rated_me(message: aiogram.types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ –æ—Ü–µ–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not config.ENABLE_REVIEWS:
        await message.answer("‚ùå –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return
    
    student = await queries.StudentQueries.get_by_tg_id(message.from_user.id)
    
    if not student or not getattr(student, 'team_memberships', None):
        await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ratings = await queries.RatingQueries.get_who_rated_me(student.id)
    
    if not ratings:
        await message.answer(
            "‚≠ê –í–∞—Å –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª.\n\n"
            "–û—Ü–µ–Ω–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã "
            "–≤–æ—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π \"–û—Ü–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã\"."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    teammates = await queries.StudentQueries.get_teammates(student.id)
    total_teammates = len(teammates)
    rated_count = len(ratings)
    
    ratings_text = helpers.format_ratings_list(ratings)
    
    status_text = (
        f"üìä *–°—Ç–∞—Ç—É—Å –æ—Ü–µ–Ω–æ–∫:*\n"
        f"‚úÖ –û—Ü–µ–Ω–∏–ª–∏: {rated_count}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {total_teammates - rated_count}\n"
        f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_teammates}\n\n"
    )
    
    full_text = status_text + ratings_text
    
    await message.answer(full_text, parse_mode="Markdown")


@decorators.log_handler("process_teammate_selection")
async def process_teammate_selection(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_review(message, state)
        return
    
    data = await state.get_data()
    teammates_to_rate = data.get('teammates_to_rate', [])
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    selected_teammate = None
    for teammate in teammates_to_rate:
        if teammate.name == message.text:
            selected_teammate = teammate
            break
    
    if not selected_teammate:
        await message.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:")
        return
    
    await state.update_data(
        selected_teammate=selected_teammate,
        teammate_name=selected_teammate.name
    )
    await state.set_state(states.ReviewProcess.rating_input)
    
    await message.answer(
        f"‚≠ê *–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ: {selected_teammate.name}*\n\n"
        f"–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –æ—Ç {config.MIN_RATING} –¥–æ {config.MAX_RATING}:",
        reply_markup=inline_keyboards.get_ratings_inline_keyboard(),
        parse_mode="Markdown"
    )


@decorators.log_handler("process_rating_input")
async def process_rating_input(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ü–µ–Ω–∫–∏"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_review(message, state)
        return
    
    rating = helpers.validate_rating(message.text)
    
    if rating is None:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {config.MIN_RATING} –¥–æ {config.MAX_RATING}:"
        )
        return
    
    data = await state.get_data()
    await state.update_data(overall_rating=rating)
    await state.set_state(states.ReviewProcess.advantages_input)
    
    await message.answer(
        f"‚úÖ –û—Ü–µ–Ω–∫–∞: {rating}/10\n\n"
        f"üëç *–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞*\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ {data['teammate_name']}:",
        reply_markup=inline_keyboards.get_skip_cancel_inline_keyboard("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"),
        parse_mode="Markdown"
    )


@decorators.log_handler("process_advantages_input")
async def process_advantages_input(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_review(message, state)
        return
    
    advantages = "–ù–µ —É–∫–∞–∑–∞–Ω–æ" if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text.strip()
    
    if len(advantages) > 1000:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    
    data = await state.get_data()
    await state.update_data(advantages=advantages)
    await state.set_state(states.ReviewProcess.disadvantages_input)
    
    await message.answer(
        f"‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∞–Ω—ã\n\n"
        f"üìà *–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è*\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ {data['teammate_name']} –º–æ–≥ –±—ã —É–ª—É—á—à–∏—Ç—å:",
        reply_markup=inline_keyboards.get_skip_cancel_inline_keyboard("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"),
        parse_mode="Markdown"
    )


@decorators.log_handler("process_disadvantages_input")
async def process_disadvantages_input(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_review(message, state)
        return
    
    disadvantages = "–ù–µ —É–∫–∞–∑–∞–Ω–æ" if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text.strip()
    
    if len(disadvantages) > 1000:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    
    await state.update_data(disadvantages=disadvantages)
    await state.set_state(states.ReviewProcess.confirmation)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
    data = await state.get_data()
    
    confirmation_text = (
        f"üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ü–µ–Ω–∫—É:*\n\n"
        f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {data['teammate_name']}\n"
        f"‚≠ê –û—Ü–µ–Ω–∫–∞: {data['overall_rating']}/10\n"
        f"üëç –ü–ª—é—Å—ã: {data['advantages'][:100]}{'...' if len(data['advantages']) > 100 else ''}\n"
        f"üìà –ß—Ç–æ —É–ª—É—á—à–∏—Ç—å: {disadvantages[:100]}{'...' if len(disadvantages) > 100 else ''}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É?"
    )
    
    await message.answer(
        confirmation_text,
        reply_markup=inline_keyboards.get_review_confirm_keyboard(),
        parse_mode="Markdown"
    )


@decorators.log_handler("confirm_review")
async def confirm_review(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏"""
    if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        student = await queries.StudentQueries.get_by_tg_id(message.from_user.id)
        data = await state.get_data()
        
        try:
            await queries.RatingQueries.create(
                assessor_id=student.id,
                assessed_id=data['selected_teammate'].id,
                overall_rating=data['overall_rating'],
                advantages=data['advantages'],
                disadvantages=data['disadvantages']
            )
            
            await state.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            has_team = bool(getattr(student, 'team_memberships', []))
            is_admin = False
            if has_team:
                team_membership = student.team_memberships[0]
                is_admin = team_membership.team.admin.id == student.id
            
            keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
            
            await message.answer(
                f"‚úÖ *–û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\n"
                f"üë§ {data['teammate_name']}\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {data['overall_rating']}/10\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {str(e)}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            await state.clear()
    
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_review(message, state)


async def cancel_review(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è"""
    await state.clear()
    
    student = await queries.StudentQueries.get_by_tg_id(message.from_user.id)
    
    if student:
        has_team = bool(getattr(student, 'team_memberships', []))
        is_admin = False
        if has_team:
            team_membership = student.team_memberships[0]
            is_admin = team_membership.team.admin.id == student.id
        
        keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
    else:
        keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)
    
    await message.answer("‚ùå –û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)


def register_reviews_handlers(dp: aiogram.Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ü–µ–Ω–æ–∫"""
    if not config.ENABLE_REVIEWS:
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(handle_rate_teammates, F.text == "–û—Ü–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã")
    dp.message.register(handle_who_rated_me, F.text == "–ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª?")
    
    # FSM –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è)
    # process_teammate_selection, process_rating_input, confirm_review —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ callback
    dp.message.register(process_advantages_input, states.ReviewProcess.advantages_input)
    dp.message.register(process_disadvantages_input, states.ReviewProcess.disadvantages_input)
