import aiogram
import aiogram.filters
import aiogram.fsm.context
import aiogram.types
from aiogram import F
import bot.database.queries as queries
import bot.keyboards.reply as keyboards
import bot.keyboards.inline as inline_keyboards
import bot.states.user_states as states
import bot.utils.helpers as helpers
import bot.utils.decorators as decorators
import re

def is_valid_full_name(name):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è):
    - –¢–æ—á–Ω–æ 2 —Å–ª–æ–≤–∞
    - –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
    - –û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–∫–≤—ã —Å—Ç—Ä–æ—á–Ω—ã–µ
    - –î–ª–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞: 2-18 –±—É–∫–≤
    - –¢–û–õ–¨–ö–û –∫–∏—Ä–∏–ª–ª–∏—Ü–∞!
    """
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: —Ç–æ—á–Ω–æ 2 —Å–ª–æ–≤–∞, –∫–∞–∂–¥–æ–µ –æ—Ç 2 –¥–æ 18 –±—É–∫–≤, –¢–û–õ–¨–ö–û –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
    pattern = r'^[–ê-–Ø][–∞-—è]{1,17} [–ê-–Ø][–∞-—è]{1,17}$'
    return bool(re.match(pattern, name.strip()))

@decorators.log_handler("register_team")
async def handle_register_team(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    student = await queries.StudentQueries.get_by_tg_id(message.from_user.id)
    
    if student and getattr(student, 'team_memberships', None):
        await message.answer(
            "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
        )
        return
    
    await state.set_state(states.TeamRegistration.team_name)
    await message.answer(
        "üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:",
        parse_mode="Markdown"
    )

@decorators.log_handler("process_team_name")
async def process_team_name(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    team_name = message.text.strip()
    
    if not helpers.is_valid_team_name(team_name):
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(team_name=team_name)
    await state.set_state(states.TeamRegistration.product_name)
    await message.answer(
        "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:",
        parse_mode="Markdown"
    )

@decorators.log_handler("process_product_name")
async def process_product_name(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    product_name = message.text.strip()
    
    if not helpers.is_valid_product_name(product_name):
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(product_name=product_name)
    await state.set_state(states.TeamRegistration.user_name)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    suggested_name = f"{first_name} {last_name}".strip()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∏–º—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–µ–º—É —Ä–µ–≥–µ–∫—Å—É
    keyboard = None
    if suggested_name and is_valid_full_name(suggested_name):
        keyboard = aiogram.types.ReplyKeyboardMarkup(
            keyboard=[[aiogram.types.KeyboardButton(text=suggested_name)]],
            resize_keyboard=True,
            one_time_keyboard=True,
            input_field_placeholder=suggested_name
        )
    
    await message.answer(
        "–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è (¬´–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤¬ª):",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@decorators.log_handler("process_admin_name")
async def process_admin_name(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_name = message.text.strip()
    
    if not is_valid_full_name(user_name):
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 2 —Å–ª–æ–≤ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è), –∫–∞–∂–¥–æ–µ –æ—Ç 2 –¥–æ 18 –±—É–∫–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(user_name=user_name)
    await state.set_state(states.TeamRegistration.user_group)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–∏–ª–∏ 0 –µ—Å–ª–∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã):",
        parse_mode="Markdown"
    )

@decorators.log_handler("process_admin_group")
async def process_admin_group(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_group = message.text.strip()
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º "0" –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –≥—Ä—É–ø–ø—ã
    if user_group != "0" and not helpers.is_valid_group_number(user_group):
        await message.answer(
            "‚ùå –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤ (–∏–ª–∏ 0 –µ—Å–ª–∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(user_group=user_group)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    await state.set_state(states.TeamRegistration.confirm)
    
    confirmation_text = (
        "üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:*\n\n"
        f"üë• –ö–æ–º–∞–Ω–¥–∞: {data['team_name']}\n"
        f"üì± –ü—Ä–æ–¥—É–∫—Ç: {data['product_name']}\n"
        f"üë§ –í–∞—à–µ –∏–º—è: {data['user_name']}\n"
        f"üéì –ì—Ä—É–ø–ø–∞: {data['user_group']}\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    await message.answer(
        confirmation_text,
        reply_markup=inline_keyboards.get_team_registration_confirm_keyboard(),
        parse_mode="Markdown"
    )

@decorators.log_handler("confirm_team_registration")
async def confirm_team_registration(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    if message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        data = await state.get_data()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
            student = await queries.StudentQueries.get_by_tg_id(message.from_user.id)
            
            if not student:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                student = await queries.StudentQueries.create(
                    tg_id=message.from_user.id,
                    name=data['user_name'],
                    group_num=data['user_group']
                )
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            invite_code = helpers.generate_invite_code()
            team = await queries.TeamQueries.create(
                team_name=data['team_name'],
                product_name=data['product_name'],
                invite_code=invite_code,
                admin_id=student.id
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–æ–º–∞–Ω–¥—É
            await queries.TeamQueries.add_member(
                team_id=team.id,
                student_id=student.id,
                role="Scrum Master"
            )
            
            await state.clear()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = keyboards.get_main_menu_keyboard(is_admin=True, has_team=True)
            
            await message.answer(
                f"üéâ *–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üë• –ö–æ–º–∞–Ω–¥–∞: {data['team_name']}\n"
                f"üì± –ü—Ä–æ–¥—É–∫—Ç: {data['product_name']}\n"
                f"üîó –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{invite_code}`\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É \"–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\".",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await state.clear()
    
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboard)

@decorators.log_handler("invite_link")
async def handle_invite_link(message: aiogram.types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    student = await queries.StudentQueries.get_by_tg_id(message.from_user.id)
    
    if not student or not getattr(student, 'team_memberships', None):
        await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    team_membership = student.team_memberships[0]
    team = team_membership.team
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if team.admin.id != student.id:
        await message.answer("‚ùå –°–æ–∑–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    bot_username = (await message.bot.get_me()).username
    invite_url = f"https://t.me/{bot_username}?start={team.invite_code}"
    
    await message.answer(
        f"üîó *–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã*\n\n"
        f"üë• –ö–æ–º–∞–Ω–¥–∞: {team.team_name}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {invite_url}\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.",
        parse_mode="Markdown"
    )

@decorators.log_handler("my_team")
async def handle_my_team(message: aiogram.types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ"""
    student = await queries.StudentQueries.get_by_tg_id(message.from_user.id)
    
    if not student or not getattr(student, 'team_memberships', None):
        await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    team_membership = student.team_memberships[0]
    team = team_membership.team
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    teammates = await queries.StudentQueries.get_teammates(student.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_members = teammates + [{'student': {'id': student.id, 'name': student.name}, 'role': team_membership.role}]
    
    team_info = helpers.format_team_info(team, all_members)
    await message.answer(team_info, parse_mode="Markdown")

@decorators.log_handler("process_join_user_name")
async def process_join_user_name(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ"""
    user_name = message.text.strip()
    
    if not is_valid_full_name(user_name):
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 2 —Å–ª–æ–≤ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è), –∫–∞–∂–¥–æ–µ –æ—Ç 2 –¥–æ 18 –±—É–∫–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(user_name=user_name)
    await state.set_state(states.JoinTeam.user_group)
    await message.answer(
        f"‚úÖ –ò–º—è: *{user_name}*\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–∏–ª–∏ 0 –µ—Å–ª–∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã):",
        parse_mode="Markdown"
    )

@decorators.log_handler("process_join_user_group")
async def process_join_user_group(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ"""
    user_group = message.text.strip()
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º "0" –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –≥—Ä—É–ø–ø—ã
    if user_group != "0" and not helpers.is_valid_group_number(user_group):
        await message.answer(
            "‚ùå –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤ (–∏–ª–∏ 0 –µ—Å–ª–∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(user_group=user_group)
    await state.set_state(states.JoinTeam.user_role)
    await message.answer(
        f"‚úÖ –ì—Ä—É–ø–ø–∞: *{user_group}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ:",
        reply_markup=inline_keyboards.get_roles_inline_keyboard(),
        parse_mode="Markdown"
    )

@decorators.log_handler("process_join_user_role")
async def process_join_user_role(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–ª–∏ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_join_team(message, state)
        return
    
    valid_roles = ["Product owner", "Scrum Master", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã"]
    
    if message.text not in valid_roles:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return
    
    await state.update_data(user_role=message.text)
    await state.set_state(states.JoinTeam.confirm)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    
    confirmation_text = (
        f"üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:*\n\n"
        f"üë• –ö–æ–º–∞–Ω–¥–∞: {data['team_name']}\n"
        f"üë§ –í–∞—à–µ –∏–º—è: {data.get('user_name', '–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')}\n"
        f"üéì –ì—Ä—É–ø–ø–∞: {data.get('user_group', '–£–∂–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üíº –†–æ–ª—å: {data['user_role']}\n\n"
        f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ?"
    )
    
    await message.answer(
        confirmation_text,
        reply_markup=inline_keyboards.get_join_team_confirm_keyboard(),
        parse_mode="Markdown"
    )

@decorators.log_handler("confirm_join_team")
async def confirm_join_team(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ"""
    if message.text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è":
        data = await state.get_data()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
            student = await queries.StudentQueries.get_by_tg_id(message.from_user.id)
            
            if not student:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                student = await queries.StudentQueries.create(
                    tg_id=message.from_user.id,
                    name=data['user_name'],
                    group_num=data['user_group']
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
            await queries.TeamQueries.add_member(
                team_id=data['team_id'],
                student_id=student.id,
                role=data['user_role']
            )
            
            await state.clear()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=True)
            
            await message.answer(
                f"üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!*\n\n"
                f"üë• –ö–æ–º–∞–Ω–¥–∞: {data['team_name']}\n"
                f"üíº –í–∞—à–∞ —Ä–æ–ª—å: {data['user_role']}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏ "
                f"–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ: {str(e)}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await state.clear()
    
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_join_team(message, state)

async def cancel_join_team(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ"""
    await state.clear()
    keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)
    await message.answer("‚ùå –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)

def register_team_handlers(dp: aiogram.Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(handle_register_team, F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã")
    dp.message.register(handle_invite_link, F.text == "–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
    dp.message.register(handle_my_team, F.text == "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞")
    
    # FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è)
    dp.message.register(process_team_name, states.TeamRegistration.team_name)
    dp.message.register(process_product_name, states.TeamRegistration.product_name)
    dp.message.register(process_admin_name, states.TeamRegistration.user_name)
    dp.message.register(process_admin_group, states.TeamRegistration.user_group)
    # confirm_team_registration —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback
    
    # FSM –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è)
    dp.message.register(process_join_user_name, states.JoinTeam.user_name)
    dp.message.register(process_join_user_group, states.JoinTeam.user_group)
    # process_join_user_role –∏ confirm_join_team —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ callback