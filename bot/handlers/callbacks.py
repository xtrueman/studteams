"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ –±–æ—Ç–µ.
"""

import aiogram
import aiogram.filters
import aiogram.fsm.context
import config
from aiogram import F

import bot.database.queries as queries
import bot.keyboards.inline as inline_keyboards
import bot.keyboards.reply as keyboards
import bot.states.user_states as states
import bot.utils.decorators as decorators
import bot.utils.helpers as helpers

# Team Registration Callbacks


@decorators.log_handler("callback_confirm_team_reg")
async def callback_confirm_team_registration(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    data = await state.get_data()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        student = await queries.StudentQueries.get_by_tg_id(callback.from_user.id)
        
        if not student:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            student = await queries.StudentQueries.create(
                tg_id=callback.from_user.id,
                name=data['user_name'],
                group_num=data['user_group']
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        invite_code = helpers.generate_invite_code()
        team = await queries.TeamQueries.create(
            team_name=data['team_name'],
            product_name=data['product_name'],
            invite_code=invite_code,
            admin_id=student.id
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–æ–º–∞–Ω–¥—É
        await queries.TeamQueries.add_member(
            team_id=team.id,
            student_id=student.id,
            role="Scrum Master"
        )
        
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = keyboards.get_main_menu_keyboard(is_admin=True, has_team=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        bot_info = await callback.bot.get_me()
        bot_username = bot_info.username if bot_info else None
        if bot_username:
            invite_link_text = await helpers.get_invite_link_text(
                data['team_name'], invite_code, bot_username, show_instruction=True
            )
        else:
            invite_link_text = ""
        
        if callback.message:
            await callback.message.edit_text(
                f"üéâ *–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üë• –ö–æ–º–∞–Ω–¥–∞: {data['team_name']}\n"
                f"üì± –ü—Ä–æ–¥—É–∫—Ç: {data['product_name']}\n"
                f"üîó –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{invite_code}`"
                f"{invite_link_text}",
                parse_mode="Markdown"
            )
            
            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        
    except Exception as e:
        if callback.message:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        await state.clear()
    
    await callback.answer()


@decorators.log_handler("callback_cancel_team_reg")
async def callback_cancel_team_registration(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    await state.clear()
    keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)
    
    if callback.message:
        await callback.message.edit_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback.answer()

# Role Selection Callbacks


@decorators.log_handler("callback_role_selection")
async def callback_role_selection(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role_mapping = {
        "role_po": "Product owner",
        "role_sm": "Scrum Master",
        "role_dev": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "role_member": "–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã"
    }
    
    if callback.data == "cancel":
        await callback_cancel_join_team(callback, state)
        return
    
    if not callback.data:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
        
    role = role_mapping.get(callback.data)
    if not role:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å")
        return
    
    await state.update_data(user_role=role)
    await state.set_state(states.JoinTeam.confirm)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    
    confirmation_text = (
        f"üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:*\n\n"
        f"üë• –ö–æ–º–∞–Ω–¥–∞: {data['team_name']}\n"
        f"üë§ –í–∞—à–µ –∏–º—è: {data.get('user_name', '–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')}\n"
        f"üéì –ì—Ä—É–ø–ø–∞: {data.get('user_group', '–£–∂–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üíº –†–æ–ª—å: {role}\n\n"
        f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ?"
    )
    
    if callback.message:
        await callback.message.edit_text(
            confirmation_text,
            reply_markup=inline_keyboards.get_join_team_confirm_keyboard(),
            parse_mode="Markdown"
        )
    await callback.answer()

# Join Team Callbacks


@decorators.log_handler("callback_confirm_join_team")
async def callback_confirm_join_team(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ"""
    data = await state.get_data()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        student = await queries.StudentQueries.get_by_tg_id(callback.from_user.id)
        
        if not student:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ state
            if 'user_name' not in data or 'user_group' not in data:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            student = await queries.StudentQueries.create(
                tg_id=callback.from_user.id,
                name=data['user_name'],
                group_num=data['user_group']
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
        await queries.TeamQueries.add_member(
            team_id=data['team_id'],
            student_id=student.id,
            role=data['user_role']
        )
        
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=True)
        
        if callback.message:
            await callback.message.edit_text(
                f"üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!*\n\n"
                f"üë• –ö–æ–º–∞–Ω–¥–∞: {data['team_name']}\n"
                f"üíº –í–∞—à–∞ —Ä–æ–ª—å: {data['user_role']}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏ "
                f"–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã.",
                parse_mode="Markdown"
            )
            
            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        
    except Exception as e:
        if callback.message:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ: {str(e)}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        await state.clear()
    
    await callback.answer()


@decorators.log_handler("callback_cancel_join_team")
async def callback_cancel_join_team(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ"""
    await state.clear()
    keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)
    
    if callback.message:
        await callback.message.edit_text("‚ùå –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback.answer()

# Sprint Selection Callbacks


@decorators.log_handler("callback_sprint_selection")
async def callback_sprint_selection(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –≤—ã–±–æ—Ä–∞ —Å–ø—Ä–∏–Ω—Ç–∞"""
    if not callback.data:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
        
    if callback.data == "cancel":
        await callback_cancel_action(callback, state)
        return
    
    if not callback.data.startswith("sprint_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    
    sprint_num = int(callback.data.split("_")[1])
    
    await state.update_data(sprint_num=sprint_num)
    await state.set_state(states.ReportCreation.report_text)
    
    if callback.message:
        await callback.message.edit_text(
            f"‚úÖ –°–ø—Ä–∏–Ω—Ç ‚Ññ{sprint_num}\n\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:"
        )
    await callback.answer()

# Reports Callbacks


@decorators.log_handler("callback_confirm_report")
async def callback_confirm_report(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞"""
    student = await queries.StudentQueries.get_by_tg_id(callback.from_user.id)
    data = await state.get_data()
    
    try:
        await queries.ReportQueries.create_or_update(
            student_id=student.id,
            sprint_num=data['sprint_num'],
            report_text=data['report_text']
        )
        
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        has_team = bool(getattr(student, 'team_memberships', []))
        is_admin = False
        if has_team:
            team_membership = student.team_memberships[0]
            is_admin = team_membership.team.admin.id == student.id
        
        keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
        
        if callback.message:
            await callback.message.edit_text(
                f"‚úÖ *–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*\n\n"
                f"üìä –°–ø—Ä–∏–Ω—Ç: ‚Ññ{data['sprint_num']}\n"
                f"üìÖ –î–∞—Ç–∞: {helpers.format_datetime('now')}",
                parse_mode="Markdown"
            )
            
            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        
    except Exception as e:
        if callback.message:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        await state.clear()
    
    await callback.answer()


@decorators.log_handler("callback_cancel_report")
async def callback_cancel_report(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞"""
    await callback_cancel_action(callback, state)


@decorators.log_handler("callback_confirm_delete_report")
async def callback_confirm_delete_report(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    student = await queries.StudentQueries.get_by_tg_id(callback.from_user.id)
    data = await state.get_data()
    
    try:
        await queries.ReportQueries.delete_report(
            student_id=student.id,
            sprint_num=data['sprint_num']
        )
        
        await state.clear()
        
        if callback.message:
            await callback.message.edit_text(
                f"üóë *–û—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω*\n\n"
                f"üìä –°–ø—Ä–∏–Ω—Ç ‚Ññ{data['sprint_num']} - –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                parse_mode="Markdown"
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ú–æ–∏ –æ—Ç—á—ë—Ç—ã"
            reports = await queries.ReportQueries.get_by_student(student.id)
            report_text = helpers.format_reports_list(reports)
            keyboard = inline_keyboards.get_report_management_keyboard(reports)
            await callback.message.answer(report_text, parse_mode="Markdown", reply_markup=keyboard)
        
    except Exception as e:
        if callback.message:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        await state.clear()
    
    await callback.answer()


@decorators.log_handler("callback_cancel_delete_report")
async def callback_cancel_delete_report(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    await callback_cancel_action(callback, state)

# Member Selection Callbacks


@decorators.log_handler("callback_member_selection")
async def callback_member_selection(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not callback.data:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
        
    if callback.data == "cancel":
        await callback_cancel_admin_action(callback, state)
        return
    
    if not callback.data.startswith("member_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    
    member_index = int(callback.data.split("_")[1])
    data = await state.get_data()
    teammates = data.get('teammates', [])
    
    if member_index >= len(teammates):
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    selected_member = teammates[member_index]
    
    await state.update_data(selected_member=selected_member)
    await state.set_state(states.MemberRemoval.confirmation)
    
    if callback.message:
        await callback.message.edit_text(
            f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å *{selected_member.name}* –∏–∑ –∫–æ–º–∞–Ω–¥—ã?\n\n"
            f"*–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!*\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=inline_keyboards.get_member_removal_confirm_keyboard(),
            parse_mode="Markdown"
        )
    await callback.answer()


@decorators.log_handler("callback_confirm_remove_member")
async def callback_confirm_remove_member(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    data = await state.get_data()
    selected_member = data['selected_member']
    team_id = data['team_id']
    
    try:
        await queries.TeamQueries.remove_member(
            team_id=team_id,
            student_id=selected_member.id
        )
        
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
        bot_info = await callback.bot.get_me()
        bot_username = bot_info.username if bot_info else None
        team_data = await helpers.get_team_display_data(None, callback.from_user.id, bot_username)
        
        if callback.message:
            if team_data:
                await callback.message.edit_text(
                    f"üóë *–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω*\n\n"
                    f"üë§ {selected_member.name} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã\n\n"
                    f"{team_data['team_info']}",
                    reply_markup=team_data['keyboard'],
                    parse_mode="Markdown"
                )
            else:
                await callback.message.edit_text(
                    f"üóë *–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω*\n\n"
                    f"üë§ {selected_member.name} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã",
                    parse_mode="Markdown"
                )
        
    except Exception as e:
        if callback.message:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {str(e)}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        await state.clear()
    
    await callback.answer()


@decorators.log_handler("callback_cancel_remove_member")
async def callback_cancel_remove_member(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    await callback_cancel_admin_action(callback, state)

# Teammate Selection Callbacks (for reviews)


@decorators.log_handler("callback_teammate_selection")
async def callback_teammate_selection(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
    if callback.data == "cancel":
        await callback_cancel_review(callback, state)
        return
    
    if not callback.data.startswith("teammate_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    
    teammate_index = int(callback.data.split("_")[1])
    data = await state.get_data()
    teammates_to_rate = data.get('teammates_to_rate', [])
    
    if teammate_index >= len(teammates_to_rate):
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    selected_teammate = teammates_to_rate[teammate_index]
    
    await state.update_data(
        selected_teammate=selected_teammate,
        teammate_name=selected_teammate.name
    )
    await state.set_state(states.ReviewProcess.rating_input)
    
    if callback.message:
        await callback.message.edit_text(
            f"‚≠ê *–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ: {selected_teammate.name}*\n\n"
            f"–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –æ—Ç {config.MIN_RATING} –¥–æ {config.MAX_RATING}:",
            reply_markup=inline_keyboards.get_ratings_inline_keyboard(),
            parse_mode="Markdown"
        )
    await callback.answer()

# Rating Selection Callbacks


@decorators.log_handler("callback_rating_selection")
async def callback_rating_selection(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏"""
    if callback.data == "cancel":
        await callback_cancel_review(callback, state)
        return
    
    if not callback.data.startswith("rating_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    
    rating = int(callback.data.split("_")[1])
    
    if rating < config.MIN_RATING or rating > config.MAX_RATING:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞")
        return
    
    data = await state.get_data()
    await state.update_data(overall_rating=rating)
    await state.set_state(states.ReviewProcess.advantages_input)
    
    if callback.message:
        await callback.message.edit_text(
            f"‚úÖ –û—Ü–µ–Ω–∫–∞: {rating}/10\n\n"
            f"üëç *–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞*\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ {data['teammate_name']}:",
            reply_markup=inline_keyboards.get_skip_cancel_inline_keyboard("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"),
            parse_mode="Markdown"
        )
    await callback.answer()

# Skip/Cancel Callbacks (for reviews)


@decorators.log_handler("callback_skip")
async def callback_skip(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞"""
    current_state = await state.get_state()
    
    if current_state == states.ReviewProcess.advantages_input:
        data = await state.get_data()
        await state.update_data(advantages="–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        await state.set_state(states.ReviewProcess.disadvantages_input)
        
        if callback.message:
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∞–Ω—ã\n\n"
                f"üìà *–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è*\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ {data['teammate_name']} –º–æ–≥ –±—ã —É–ª—É—á—à–∏—Ç—å:",
                reply_markup=inline_keyboards.get_skip_cancel_inline_keyboard("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"),
                parse_mode="Markdown"
            )
    
    elif current_state == states.ReviewProcess.disadvantages_input:
        await state.update_data(disadvantages="–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        await state.set_state(states.ReviewProcess.confirmation)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        data = await state.get_data()
        
        confirmation_text = (
            f"üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ü–µ–Ω–∫—É:*\n\n"
            f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {data['teammate_name']}\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∞: {data['overall_rating']}/10\n"
            f"üëç –ü–ª—é—Å—ã: {data['advantages'][:100]}{'...' if len(data['advantages']) > 100 else ''}\n"
            f"üìà –ß—Ç–æ —É–ª—É—á—à–∏—Ç—å: {data['disadvantages'][:100]}{'...' if len(data['disadvantages']) > 100 else ''}\n\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É?"
        )
        
        if callback.message:
            await callback.message.edit_text(
                confirmation_text,
                reply_markup=inline_keyboards.get_review_confirm_keyboard(),
                parse_mode="Markdown"
            )
    
    await callback.answer()

# Review Confirm Callbacks


@decorators.log_handler("callback_confirm_review")
async def callback_confirm_review(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏"""
    student = await queries.StudentQueries.get_by_tg_id(callback.from_user.id)
    data = await state.get_data()
    
    try:
        await queries.RatingQueries.create(
            assessor_id=student.id,
            assessed_id=data['selected_teammate']['id'],
            overall_rating=data['overall_rating'],
            advantages=data['advantages'],
            disadvantages=data['disadvantages']
        )
        
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        has_team = bool(getattr(student, 'team_memberships', []))
        is_admin = False
        if has_team:
            team_membership = student.team_memberships[0]
            is_admin = team_membership.team.admin.id == student.id
        
        keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
        
        if callback.message:
            await callback.message.edit_text(
                f"‚úÖ *–û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\n"
                f"üë§ {data['teammate_name']}\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {data['overall_rating']}/10\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
                parse_mode="Markdown"
            )
            
            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        
    except Exception as e:
        if callback.message:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {str(e)}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        await state.clear()
    
    await callback.answer()


@decorators.log_handler("callback_cancel_review")
async def callback_cancel_review(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è"""
    await state.clear()
    
    student = await queries.StudentQueries.get_by_tg_id(callback.from_user.id)
    
    if student:
        has_team = bool(getattr(student, 'team_memberships', []))
        is_admin = False
        if has_team:
            team_membership = student.team_memberships[0]
            is_admin = team_membership.team.admin.id == student.id
        
        keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
    else:
        keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)
    
    if callback.message:
        await callback.message.edit_text("‚ùå –û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback.answer()

# General Cancel Callbacks


@decorators.log_handler("callback_cancel_action")
async def callback_cancel_action(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–π –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    
    student = await queries.StudentQueries.get_by_tg_id(callback.from_user.id)
    
    if student:
        has_team = bool(getattr(student, 'team_memberships', []))
        is_admin = False
        if has_team:
            team_membership = student.team_memberships[0]
            is_admin = team_membership.team.admin.id == student.id
        
        keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
    else:
        keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)
    
    if callback.message:
        await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback.answer()


@decorators.log_handler("callback_cancel_admin_action")
async def callback_cancel_admin_action(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    keyboard = keyboards.get_main_menu_keyboard(is_admin=True, has_team=True)
    
    if callback.message:
        await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback.answer()

# Team Member Management Callbacks


@decorators.log_handler("callback_edit_member")
async def callback_edit_member(callback: aiogram.types.CallbackQuery):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏
    await callback.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö", show_alert=True)

# Report Management Callbacks


@decorators.log_handler("callback_edit_report")
async def callback_edit_report(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    if not callback.data.startswith("edit_report_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    
    sprint_num = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç
    student = await queries.StudentQueries.get_by_tg_id(callback.from_user.id)
    
    if not student:
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    reports = await queries.ReportQueries.get_by_student(student.id)
    current_report = None
    
    for report in reports:
        if report.sprint_num == sprint_num:
            current_report = report
            break
    
    if not current_report:
        await callback.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(sprint_num=sprint_num, editing=True)
    await state.set_state(states.ReportCreation.report_text)
    
    if callback.message:
        await callback.message.edit_text(
            f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞*\n\n"
            f"üìä *–°–ø—Ä–∏–Ω—Ç ‚Ññ{sprint_num}:*\n"
            f"_{current_report.report_text}_\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞:",
            parse_mode="Markdown"
        )
    await callback.answer()


@decorators.log_handler("callback_delete_report_inline")
async def callback_delete_report_inline(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    if not callback.data.startswith("delete_report_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    
    sprint_num = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    student = await queries.StudentQueries.get_by_tg_id(callback.from_user.id)
    
    if not student:
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    reports = await queries.ReportQueries.get_by_student(student.id)
    report_exists = any(report.sprint_num == sprint_num for report in reports)
    
    if not report_exists:
        await callback.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(sprint_num=sprint_num)
    
    if callback.message:
        await callback.message.edit_text(
            f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Å–ø—Ä–∏–Ω—Ç—É ‚Ññ{sprint_num}?\n\n"
            f"*–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!*",
            reply_markup=inline_keyboards.get_report_delete_confirm_keyboard(),
            parse_mode="Markdown"
        )
    await callback.answer()


@decorators.log_handler("callback_remove_member_inline")
async def callback_remove_member_inline(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    if not callback.data.startswith("remove_member_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    
    member_id = callback.data.split("_")[2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    student = await queries.StudentQueries.get_by_tg_id(callback.from_user.id)
    
    if not student or not getattr(student, 'team_memberships', None):
        await callback.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ")
        return
    
    team_membership = student.team_memberships[0]
    team = team_membership.team
    
    if team.admin.id != student.id:
        await callback.answer("‚ùå –£–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
    member_to_remove = await queries.StudentQueries.get_by_id(member_id)
    
    if not member_to_remove:
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        selected_member=member_to_remove,
        team_id=team.id
    )
    
    if callback.message:
        await callback.message.edit_text(
            f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å *{member_to_remove.name}* –∏–∑ –∫–æ–º–∞–Ω–¥—ã?\n\n"
            f"*–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!*\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=inline_keyboards.get_member_removal_confirm_keyboard(),
            parse_mode="Markdown"
        )
    await callback.answer()


def register_callback_handlers(dp: aiogram.Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # Team registration callbacks
    dp.callback_query.register(callback_confirm_team_registration, F.data == "confirm_team_reg")
    dp.callback_query.register(callback_cancel_team_registration, F.data == "cancel_team_reg")
    
    # Role selection callbacks
    dp.callback_query.register(callback_role_selection, F.data.in_(["role_po", "role_sm", "role_dev", "role_member", "cancel"]))
    
    # Join team callbacks
    dp.callback_query.register(callback_confirm_join_team, F.data == "confirm_join_team")
    dp.callback_query.register(callback_cancel_join_team, F.data == "cancel_join_team")
    
    # Sprint selection callbacks
    dp.callback_query.register(callback_sprint_selection, F.data.startswith("sprint_") | (F.data == "cancel"))
    
    # Report callbacks
    dp.callback_query.register(callback_confirm_report, F.data == "confirm_report")
    dp.callback_query.register(callback_cancel_report, F.data == "cancel_report")
    dp.callback_query.register(callback_confirm_delete_report, F.data == "confirm_delete_report")
    dp.callback_query.register(callback_cancel_delete_report, F.data == "cancel_delete_report")
    
    # Member selection callbacks
    dp.callback_query.register(callback_member_selection, F.data.startswith("member_") | (F.data == "cancel"))
    dp.callback_query.register(callback_confirm_remove_member, F.data == "confirm_remove_member")
    dp.callback_query.register(callback_cancel_remove_member, F.data == "cancel_remove_member")
    
    # Team member management callbacks (inline)
    dp.callback_query.register(callback_edit_member, F.data.startswith("edit_member_"))
    dp.callback_query.register(callback_remove_member_inline, F.data.startswith("remove_member_"))
    
    # Report management callbacks (inline)
    dp.callback_query.register(callback_edit_report, F.data.startswith("edit_report_"))
    dp.callback_query.register(callback_delete_report_inline, F.data.startswith("delete_report_"))
    
    # Review callbacks
    dp.callback_query.register(callback_teammate_selection, F.data.startswith("teammate_") | (F.data == "cancel"))
    dp.callback_query.register(callback_rating_selection, F.data.startswith("rating_") | (F.data == "cancel"))
    dp.callback_query.register(callback_skip, F.data == "skip")
    dp.callback_query.register(callback_confirm_review, F.data == "confirm_review")
    dp.callback_query.register(callback_cancel_review, F.data == "cancel_review")
    
    # General cancel callback (fallback)
    dp.callback_query.register(callback_cancel_action, F.data == "cancel")
