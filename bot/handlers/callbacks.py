"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ –±–æ—Ç–µ.
"""

import aiogram
import aiogram.fsm.context
from aiogram import F
from config import config

import bot.db as db
import bot.keyboards.inline as inline_keyboards
import bot.keyboards.reply as keyboards
import bot.states.user_states as states
import bot.utils.decorators as decorators
import bot.utils.helpers as helpers

# Team Registration Callbacks


@decorators.log_handler("callback_confirm_team_reg")
async def callback_confirm_team_registration(
    callback: aiogram.types.CallbackQuery,
    state: aiogram.fsm.context.FSMContext,
):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    data = await state.get_data()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        student = db.student_get_by_tg_id(callback.from_user.id)

        if not student:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            student = db.student_create(
                tg_id=callback.from_user.id,
                name=data['user_name'],
                group_num=data['user_group'] if data['user_group'] != "0" else None,
            )

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        invite_code = helpers.generate_invite_code()
        team = db.team_create(
            team_name=data['team_name'],
            product_name=data['product_name'],
            invite_code=invite_code,
            admin_student_id=student['student_id'],
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–æ–º–∞–Ω–¥—É
        db.team_add_member(
            team_id=team['team_id'],
            student_id=student['student_id'],
            role="Scrum Master",
        )

        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = keyboards.get_main_menu_keyboard(is_admin=True, has_team=True)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        invite_link_text = helpers.get_invite_link_text(
            data['team_name'], invite_code, show_instruction=True,
        )

        if callback.message:
            await callback.message.edit_text(
                f"üéâ *–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üë• –ö–æ–º–∞–Ω–¥–∞: {data['team_name']}\n"
                f"üì± –ü—Ä–æ–¥—É–∫—Ç: {data['product_name']}\n"
                f"{invite_link_text}",
                parse_mode="Markdown",
            )

            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

    except Exception as e:
        if callback.message:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e!s}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            )
        await state.clear()

    await callback.answer()


@decorators.log_handler("callback_cancel_team_reg")
async def callback_cancel_team_registration(
    callback: aiogram.types.CallbackQuery,
    state: aiogram.fsm.context.FSMContext,
):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    await state.clear()
    keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)

    if callback.message:
        await callback.message.edit_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback.answer()

# Role Selection Callbacks


@decorators.log_handler("callback_role_selection")
async def callback_role_selection(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role_mapping = {
        "role_po": "Product owner",
        "role_sm": "Scrum Master",
        "role_dev": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "role_member": "–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã",
    }

    if callback.data == "cancel":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–º–µ–Ω—ã
        current_state = await state.get_state()
        if current_state and "JoinTeam" in str(current_state):
            await callback_cancel_join_team(callback, state)
        else:
            await callback_cancel_action(callback, state)
        return

    if not callback.data:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    role = role_mapping.get(callback.data)
    if not role:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å")
        return

    await state.update_data(user_role=role)
    await state.set_state(states.JoinTeam.confirm)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()

    confirmation_text = (
        f"üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:*\n\n"
        f"üë• –ö–æ–º–∞–Ω–¥–∞: {data['team_name']}\n"
        f"üë§ –í–∞—à–µ –∏–º—è: {data.get('user_name', '–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')}\n"
        f"üéì –ì—Ä—É–ø–ø–∞: {data.get('user_group', '–£–∂–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üíº –†–æ–ª—å: {role}\n\n"
        f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ?"
    )

    if callback.message:
        await callback.message.edit_text(
            confirmation_text,
            reply_markup=inline_keyboards.get_join_team_confirm_keyboard(),
            parse_mode="Markdown",
        )
    await callback.answer()

# Join Team Callbacks


@decorators.log_handler("callback_confirm_join_team")
async def callback_confirm_join_team(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ"""
    data = await state.get_data()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        student = db.student_get_by_tg_id(callback.from_user.id)

        if not student:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ state
            if 'user_name' not in data or 'user_group' not in data:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                return

            student = db.student_create(
                tg_id=callback.from_user.id,
                name=data['user_name'],
                group_num=data['user_group'] if data['user_group'] != "0" else None,
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
        db.team_add_member(
            team_id=data['team_id'],
            student_id=student['student_id'],
            role=data['user_role'],
        )

        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=True)

        if callback.message:
            await callback.message.edit_text(
                f"üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!*\n\n"
                f"üë• –ö–æ–º–∞–Ω–¥–∞: {data['team_name']}\n"
                f"üíº –í–∞—à–∞ —Ä–æ–ª—å: {data['user_role']}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏ "
                f"–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã.",
                parse_mode="Markdown",
            )

            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

    except Exception as e:
        if callback.message:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ: {e!s}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            )
        await state.clear()

    await callback.answer()


@decorators.log_handler("callback_cancel_join_team")
async def callback_cancel_join_team(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ"""
    await state.clear()
    keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)

    if callback.message:
        await callback.message.edit_text("‚ùå –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback.answer()


# Report Callbacks
@decorators.log_handler("callback_confirm_report")
async def callback_confirm_report(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞"""
    data = await state.get_data()
    is_editing = data.get('editing', False)

    try:
        student = db.student_get_by_tg_id(callback.from_user.id)

        db.report_create_or_update(
            student_id=student['student_id'],
            sprint_num=data['sprint_num'],
            report_text=data['report_text'],
        )

        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        if callback.message:
            if is_editing:
                await callback.message.edit_text(
                    f"‚úÖ *–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n"
                    f"üìä –°–ø—Ä–∏–Ω—Ç: ‚Ññ{data['sprint_num']}\n"
                    f"üìÖ –î–∞—Ç–∞: {helpers.format_datetime('now')}",
                    parse_mode="Markdown",
                )
            else:
                await callback.message.edit_text(
                    f"‚úÖ *–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*\n\n"
                    f"üìä –°–ø—Ä–∏–Ω—Ç: ‚Ññ{data['sprint_num']}\n"
                    f"üìÖ –î–∞—Ç–∞: {helpers.format_datetime('now')}",
                    parse_mode="Markdown",
                )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ú–æ–∏ –æ—Ç—á—ë—Ç—ã"
            reports = db.report_get_by_student(student['student_id'])
            report_text = helpers.format_reports_list(reports)
            keyboard = inline_keyboards.get_report_management_keyboard(reports)
            await callback.message.answer(report_text, parse_mode="Markdown", reply_markup=keyboard)

    except Exception as e:
        if callback.message:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e!s}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            )
        await state.clear()

    await callback.answer()


@decorators.log_handler("callback_cancel_report")
async def callback_cancel_report(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞"""
    await state.clear()
    student = db.student_get_by_tg_id(callback.from_user.id)

    if callback.message:
        await callback.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        if student:
            has_team = 'team' in student
            is_admin = False
            if has_team:
                is_admin = student['team']['admin_student_id'] == student['student_id']

            keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
        else:
            keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)

        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback.answer()


@decorators.log_handler("callback_edit_report")
async def callback_edit_report(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    if not callback.data or not callback.data.startswith("edit_report_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å–ø—Ä–∏–Ω—Ç–∞ –∏–∑ callback_data
    try:
        sprint_num = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    student = db.student_get_by_tg_id(callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
    reports = db.report_get_by_student(student['student_id'])
    report_to_edit = None
    for report in reports:
        if report['sprint_num'] == sprint_num:
            report_to_edit = report
            break

    if not report_to_edit:
        await callback.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        sprint_num=sprint_num,
        report_text=report_to_edit['report_text'],
        editing=True,
    )

    await state.set_state(states.ReportCreation.report_text)

    if callback.message:
        report_preview = report_to_edit['report_text'][:200]
        ellipsis = '...' if len(report_to_edit['report_text']) > 200 else ''
        await callback.message.edit_text(
            f"üìù *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞*\n\n"
            f"üìä –°–ø—Ä–∏–Ω—Ç: ‚Ññ{sprint_num}\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞:\n{report_preview}{ellipsis}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞:",
            reply_markup=inline_keyboards.get_confirmation_inline_keyboard(
                "–û—Ç–º–µ–Ω–∞", "–ù–∞–∑–∞–¥", "cancel", "back",
            ),
            parse_mode="Markdown",
        )
    await callback.answer()


@decorators.log_handler("callback_delete_report_inline")
async def callback_delete_report_inline(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–∏–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)"""
    if not callback.data or not callback.data.startswith("delete_report_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å–ø—Ä–∏–Ω—Ç–∞ –∏–∑ callback_data
    try:
        sprint_num = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    student = db.student_get_by_tg_id(callback.from_user.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        sprint_num=sprint_num,
        student_id=student['student_id'],
    )

    if callback.message:
        await callback.message.edit_text(
            f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ *–°–ø—Ä–∏–Ω—Ç ‚Ññ{sprint_num}*?\n\n"
            f"*–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!*",
            reply_markup=inline_keyboards.get_report_delete_confirm_keyboard(),
            parse_mode="Markdown",
        )
    await callback.answer()


@decorators.log_handler("callback_confirm_delete_report")
async def callback_confirm_delete_report(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    data = await state.get_data()

    try:
        db.report_delete(
            student_id=data['student_id'],
            sprint_num=data['sprint_num'],
        )

        await state.clear()

        if callback.message:
            await callback.message.edit_text(
                f"‚úÖ *–û—Ç—á–µ—Ç –∑–∞ –°–ø—Ä–∏–Ω—Ç ‚Ññ{data['sprint_num']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!*",
                parse_mode="Markdown",
            )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ú–æ–∏ –æ—Ç—á—ë—Ç—ã"
            student = db.student_get_by_tg_id(callback.from_user.id)
            reports = db.report_get_by_student(student['student_id'])
            report_text = helpers.format_reports_list(reports)
            keyboard = inline_keyboards.get_report_management_keyboard(reports)
            await callback.message.answer(report_text, parse_mode="Markdown", reply_markup=keyboard)

    except Exception as e:
        if callback.message:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e!s}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            )
        await state.clear()

    await callback.answer()


@decorators.log_handler("callback_cancel_delete_report")
async def callback_cancel_delete_report(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    await state.clear()
    student = db.student_get_by_tg_id(callback.from_user.id)

    if callback.message:
        await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ú–æ–∏ –æ—Ç—á—ë—Ç—ã"
        reports = db.report_get_by_student(student['student_id'])
        report_text = helpers.format_reports_list(reports)
        keyboard = inline_keyboards.get_report_management_keyboard(reports)
        await callback.message.answer(report_text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()


# Review Callbacks
@decorators.log_handler("callback_confirm_review")
async def callback_confirm_review(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏"""
    if callback.data == "confirm_review":
        student = db.student_get_by_tg_id(callback.from_user.id)
        data = await state.get_data()

        try:
            db.rating_create(
                assessor_student_id=student['student_id'],
                assessored_student_id=data['selected_teammate_id'],
                overall_rating=data['overall_rating'],
                advantages=data['advantages'],
                disadvantages=data['disadvantages'],
            )

            await state.clear()

            if callback.message:
                await callback.message.edit_text(
                    f"‚úÖ *–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\n"
                    f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {data['teammate_name']}\n"
                    f"‚≠ê –û—Ü–µ–Ω–∫–∞: {data['overall_rating']}/10",
                    parse_mode="Markdown",
                )

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–û—Ü–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"
                if config.features.enable_reviews:
                    teammates_to_rate = db.student_get_teammates_not_rated(student['student_id'])

                    if not teammates_to_rate:
                        await callback.message.answer(
                            "‚úÖ –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã!\n\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª?\" —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏.",
                        )
                    else:
                        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞
                        teammate_names = [teammate['name'] for teammate in teammates_to_rate]

                        await state.set_state(states.ReviewProcess.teammate_selection)

                        keyboard = inline_keyboards.get_dynamic_inline_keyboard(
                            teammate_names, "teammate", columns=2,
                        )
                        await callback.message.answer(
                            "‚≠ê *–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã*\n\n"
                            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
                            reply_markup=keyboard,
                            parse_mode="Markdown",
                        )

        except Exception as e:
            if callback.message:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ü–µ–Ω–∫–∏: {e!s}\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                )
            await state.clear()

    await callback.answer()


@decorators.log_handler("callback_cancel_review")
async def callback_cancel_review(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏"""
    await state.clear()
    student = db.student_get_by_tg_id(callback.from_user.id)

    if callback.message:
        await callback.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        if student:
            has_team = 'team' in student
            is_admin = False
            if has_team:
                is_admin = student['team']['admin_student_id'] == student['student_id']

            keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
        else:
            keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)

        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback.answer()


# Team Member Management Callbacks
@decorators.log_handler("callback_remove_member_inline")
async def callback_remove_member_inline(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã (–∏–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)"""
    if not callback.data or not callback.data.startswith("remove_member_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ callback_data
    try:
        member_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    student = db.student_get_by_tg_id(callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã
    if not student or 'team' not in student or student['team']['admin_student_id'] != student['student_id']:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    team = student['team']

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
    member_to_remove = db.student_get_by_id(member_id)

    if not member_to_remove:
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        selected_member=member_to_remove,
        team_id=team['team_id'],
    )

    if callback.message:
        await callback.message.edit_text(
            f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å *{member_to_remove['name']}* –∏–∑ –∫–æ–º–∞–Ω–¥—ã?\n\n"
            f"*–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!*\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=inline_keyboards.get_member_removal_confirm_keyboard(),
            parse_mode="Markdown",
        )
    await callback.answer()


@decorators.log_handler("callback_confirm_remove_member")
async def callback_confirm_remove_member(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    data = await state.get_data()

    try:
        db.team_remove_member(
            team_id=data['team_id'],
            student_id=data['selected_member']['student_id'],
        )

        await state.clear()

        if callback.message:
            await callback.message.edit_text(
                f"‚úÖ *–£—á–∞—Å—Ç–Ω–∏–∫ {data['selected_member']['name']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã!*",
                parse_mode="Markdown",
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
            team_data = helpers.get_team_display_data("", callback.from_user.id)

            if team_data:
                await callback.message.answer(
                    team_data['team_info'],
                    parse_mode="Markdown",
                    reply_markup=team_data['keyboard'],
                )

    except Exception as e:
        if callback.message:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e!s}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            )
        await state.clear()

    await callback.answer()


@decorators.log_handler("callback_cancel_remove_member")
async def callback_cancel_remove_member(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    await state.clear()

    if callback.message:
        await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
        team_data = helpers.get_team_display_data("", callback.from_user.id)

        if team_data:
            await callback.message.answer(
                team_data['team_info'],
                parse_mode="Markdown",
                reply_markup=team_data['keyboard'],
            )
    await callback.answer()


# Dynamic Callbacks (pattern-based)
@decorators.log_handler("callback_sprint_selection")
async def callback_sprint_selection(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø—Ä–∏–Ω—Ç–∞"""
    if not callback.data or not callback.data.startswith("sprint_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å–ø—Ä–∏–Ω—Ç–∞ –∏–∑ callback_data
    try:
        sprint_num = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    await state.update_data(sprint_num=sprint_num)
    await state.set_state(states.ReportCreation.report_text)

    if callback.message:
        await callback.message.edit_text(
            f"‚úÖ –°–ø—Ä–∏–Ω—Ç ‚Ññ{sprint_num}\n\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:",
            reply_markup=inline_keyboards.get_confirmation_inline_keyboard("–û—Ç–º–µ–Ω–∞", "–ù–∞–∑–∞–¥", "cancel", "back"),
            parse_mode="Markdown",
        )
    await callback.answer()


@decorators.log_handler("callback_member_selection")
async def callback_member_selection(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
    if not callback.data or not callback.data.startswith("member_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ callback_data
    try:
        member_index = int(callback.data.split("_", 1)[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    data = await state.get_data()
    teammates = data.get('teammates_to_rate', [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    if member_index < 0 or member_index >= len(teammates):
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    selected_teammate = teammates[member_index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        selected_teammate_id=selected_teammate['student_id'],
        teammate_name=selected_teammate['name'],
    )

    await state.set_state(states.ReviewProcess.rating_input)

    if callback.message:
        await callback.message.edit_text(
            f"‚≠ê *–û—Ü–µ–Ω–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {selected_teammate['name']}*\n\n"
            f"–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç {config.features.min_rating} –¥–æ {config.features.max_rating}:",
            reply_markup=inline_keyboards.get_ratings_inline_keyboard(),
            parse_mode="Markdown",
        )
    await callback.answer()


@decorators.log_handler("callback_teammate_selection")
async def callback_teammate_selection(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
    if not callback.data or not callback.data.startswith("teammate_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ callback_data
    try:
        teammate_index = int(callback.data.split("_", 1)[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    data = await state.get_data()
    teammates = data.get('teammates_to_rate', [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    if teammate_index < 0 or teammate_index >= len(teammates):
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    selected_teammate = teammates[teammate_index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        selected_teammate_id=selected_teammate['student_id'],
        teammate_name=selected_teammate['name'],
    )

    await state.set_state(states.ReviewProcess.rating_input)

    if callback.message:
        await callback.message.edit_text(
            f"‚≠ê *–û—Ü–µ–Ω–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {selected_teammate['name']}*\n\n"
            f"–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç {config.features.min_rating} –¥–æ {config.features.max_rating}:",
            reply_markup=inline_keyboards.get_ratings_inline_keyboard(),
            parse_mode="Markdown",
        )
    await callback.answer()


@decorators.log_handler("callback_rating_selection")
async def callback_rating_selection(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏"""
    if not callback.data or not callback.data.startswith("rating_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ callback_data
    try:
        rating = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    if rating < config.features.min_rating or rating > config.features.max_rating:
        await callback.answer(
            f"‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {config.features.min_rating} –¥–æ {config.features.max_rating}",
        )
        return

    await state.update_data(overall_rating=rating)
    await state.set_state(states.ReviewProcess.advantages_input)

    if callback.message:
        await callback.message.edit_text(
            f"‚úÖ –û—Ü–µ–Ω–∫–∞: {rating}/10\n\n"
            f"üëç *–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞*\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:",
            parse_mode="Markdown",
        )
    await callback.answer()


@decorators.log_handler("callback_edit_member")
async def callback_edit_member(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
    if not callback.data or not callback.data.startswith("edit_member_"):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ callback_data
    try:
        member_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    student = db.student_get_by_tg_id(callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã
    if not student or 'team' not in student or student['team']['admin_student_id'] != student['student_id']:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
    member_to_edit = db.student_get_by_id(member_id)

    if not member_to_edit:
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # TODO: Implement member editing functionality
    # For now, we'll just show member info
    if callback.message:
        await callback.message.edit_text(
            f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞*\n\n"
            f"–ò–º—è: {member_to_edit['name']}\n"
            f"ID: {member_to_edit['student_id']}\n\n"
            f"–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.",
            parse_mode="Markdown",
        )
    await callback.answer()


@decorators.log_handler("callback_cancel_action")
async def callback_cancel_action(callback: aiogram.types.CallbackQuery, state: aiogram.fsm.context.FSMContext):
    """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)"""
    await state.clear()
    student = db.student_get_by_tg_id(callback.from_user.id)

    if callback.message:
        await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

        if student:
            has_team = 'team' in student
            is_admin = False
            if has_team:
                is_admin = student['team']['admin_student_id'] == student['student_id']

            keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
        else:
            keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)

        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback.answer()


def register_callback_handlers(dp: aiogram.Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # Team registration callbacks
    dp.callback_query.register(callback_confirm_team_registration, F.data == "confirm_team_reg")
    dp.callback_query.register(callback_cancel_team_registration, F.data == "cancel_team_reg")

    # Join team callbacks
    dp.callback_query.register(callback_confirm_join_team, F.data == "confirm_join_team")
    dp.callback_query.register(callback_cancel_join_team, F.data == "cancel_join_team")

    # Report callbacks - specific callbacks first
    dp.callback_query.register(callback_confirm_report, F.data == "confirm_report")
    dp.callback_query.register(callback_cancel_report, F.data == "cancel_report")
    dp.callback_query.register(callback_confirm_delete_report, F.data == "confirm_delete_report")
    dp.callback_query.register(callback_cancel_delete_report, F.data == "cancel_delete_report")

    # Review callbacks - specific callbacks first
    dp.callback_query.register(callback_confirm_review, F.data == "confirm_review")
    dp.callback_query.register(callback_cancel_review, F.data == "cancel_review")

    # Member management callbacks - specific callbacks first
    dp.callback_query.register(callback_confirm_remove_member, F.data == "confirm_remove_member")
    dp.callback_query.register(callback_cancel_remove_member, F.data == "cancel_remove_member")

    # Pattern-based callbacks with mixed patterns - more specific first
    dp.callback_query.register(callback_role_selection, F.data.in_(["role_po", "role_sm", "role_dev", "role_member"]))
    dp.callback_query.register(callback_sprint_selection, F.data.startswith("sprint_"))
    dp.callback_query.register(callback_member_selection, F.data.startswith("member_"))
    dp.callback_query.register(callback_teammate_selection, F.data.startswith("teammate_"))
    dp.callback_query.register(callback_rating_selection, F.data.startswith("rating_"))

    # Team member management callbacks (inline)
    dp.callback_query.register(callback_edit_member, F.data.startswith("edit_member_"))
    dp.callback_query.register(callback_remove_member_inline, F.data.startswith("remove_member_"))

    # Report management callbacks (inline)
    dp.callback_query.register(callback_edit_report, F.data.startswith("edit_report_"))
    dp.callback_query.register(callback_delete_report_inline, F.data.startswith("delete_report_"))

    # General cancel callback (fallback) - MUST BE LAST
    dp.callback_query.register(callback_cancel_action, F.data == "cancel")
