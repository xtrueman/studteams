"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç /start, /help –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
"""

import aiogram
import aiogram.fsm.context
import tgtexts
from aiogram import F
from aiogram.filters import Command

import bot.db as db
import bot.keyboards.inline as inline_keyboards
import bot.states.user_states as states
import bot.utils.decorators as decorators


@decorators.log_handler("start_command")
async def cmd_start(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []

    if args:
        # /start —Å –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invite_code = args[0]
        await handle_join_team(message, state, invite_code)
    else:
        # –û–±—ã—á–Ω—ã–π /start
        await handle_regular_start(message, state)


async def handle_regular_start(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –±–µ–∑ –∫–æ–¥–∞"""
    import bot.utils.helpers as helpers

    status = helpers.get_student_status(message.from_user.id)
    keyboard = helpers.get_main_menu_for_user(message.from_user.id)

    if status['student']:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(tgtexts.WELCOME_MESSAGE, reply_markup=keyboard, parse_mode="Markdown")
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StudHelper!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É (–µ—Å–ª–∏ –≤—ã Scrum Master) "
            "–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–æ–º–∞–Ω–¥—ã –∑–∞ —Å—Å—ã–ª–∫–æ–π-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º.",
            reply_markup=keyboard,
        )


async def handle_join_team(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext, invite_code: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ –ø–æ –∫–æ–¥—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    team = db.team_get_by_invite_code(invite_code)

    if not team:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–æ–º–∞–Ω–¥—ã –∑–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π.",
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    student = db.student_get_by_tg_id(message.from_user.id)

    if student and 'team' in student:
        await message.answer(
            "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ. –î–ª—è —Å–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(team_id=team['team_id'], team_name=team['team_name'])

    if student:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ - —Å—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ–º —Ä–æ–ª—å
        await state.set_state(states.JoinTeam.user_role)
        await message.answer(
            f"üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ *{team['team_name']}*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ:",
            reply_markup=inline_keyboards.get_roles_inline_keyboard(),
            parse_mode="Markdown",
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.set_state(states.JoinTeam.user_name)
        await message.answer(
            f"üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ *{team['team_name']}*\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
            parse_mode="Markdown",
        )


@decorators.log_handler("help_command")
async def cmd_help(message: aiogram.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(tgtexts.HELP_MESSAGE, parse_mode="MarkdownV2")


@decorators.log_handler("help_button")
async def handle_help_button(message: aiogram.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await message.answer(tgtexts.HELP_MESSAGE, parse_mode="MarkdownV2")


@decorators.log_handler("update_button")
async def handle_update_button(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û–±–Ω–æ–≤–∏—Ç—å"""
    import bot.utils.helpers as helpers

    await state.clear()
    keyboard = helpers.get_main_menu_for_user(message.from_user.id)
    await message.answer("üîÑ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=keyboard)


def register_start_handlers(dp: aiogram.Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(handle_help_button, F.text == "–ü–æ–º–æ—â—å")
    dp.message.register(handle_update_button, F.text == "–û–±–Ω–æ–≤–∏—Ç—å")
