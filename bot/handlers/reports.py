"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Å–ø—Ä–∏–Ω—Ç–∞–º.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ.
"""

import aiogram
import aiogram.filters
import aiogram.fsm.context
from aiogram import F

import bot.db as db
import bot.keyboards.inline as inline_keyboards
import bot.keyboards.reply as keyboards
import bot.states.user_states as states
import bot.utils.decorators as decorators
import bot.utils.helpers as helpers


@decorators.log_handler("my_reports")
async def handle_my_reports(message: aiogram.types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    student = db.student_get_by_tg_id(message.from_user.id)

    if not student:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    reports = db.report_get_by_student(student['student_id'])
    report_text = helpers.format_reports_list(reports)

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏
    keyboard = inline_keyboards.get_report_management_keyboard(reports)

    await message.answer(report_text, parse_mode="Markdown", reply_markup=keyboard)


@decorators.log_handler("send_report")
async def handle_send_report(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    student = db.student_get_by_tg_id(message.from_user.id)

    if not student or 'team' not in student:
        await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return

    await state.set_state(states.ReportCreation.sprint_selection)
    await message.answer(
        "üìù *–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ø—Ä–∏–Ω—Ç–∞:",
        reply_markup=inline_keyboards.get_sprints_inline_keyboard(),
        parse_mode="Markdown"
    )


@decorators.log_handler("process_sprint_selection")
async def process_sprint_selection(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø—Ä–∏–Ω—Ç–∞"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        student = db.student_get_by_tg_id(message.from_user.id)
        if student:
            has_team = 'team' in student
            is_admin = False
            if has_team:
                is_admin = student['team']['admin_student_id'] == student['student_id']
            keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
        else:
            keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboard)
        return

    sprint_num = helpers.extract_sprint_number(message.text)

    if sprint_num is None:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø—Ä–∏–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return

    await state.update_data(sprint_num=sprint_num)
    await state.set_state(states.ReportCreation.report_text)

    await message.answer(
        f"‚úÖ –°–ø—Ä–∏–Ω—Ç ‚Ññ{sprint_num}\n\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:",
        reply_markup=keyboards.get_confirmation_keyboard("–û—Ç–º–µ–Ω–∞", "–ù–∞–∑–∞–¥")
    )


@decorators.log_handler("process_report_text")
async def process_report_text(message: aiogram.types.Message, state: aiogram.fsm.context.FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞"""
    if message.text in ["–û—Ç–º–µ–Ω–∞", "–ù–∞–∑–∞–¥"]:
        if message.text == "–ù–∞–∑–∞–¥":
            await state.set_state(states.ReportCreation.sprint_selection)
            await message.answer(
                "üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ø—Ä–∏–Ω—Ç–∞:",
                reply_markup=keyboards.get_sprints_keyboard()
            )
        else:
            await state.clear()
            student = db.student_get_by_tg_id(message.from_user.id)
            if student:
                has_team = 'team' in student
                is_admin = False
                if has_team:
                    is_admin = student['team']['admin_student_id'] == student['student_id']
                keyboard = keyboards.get_main_menu_keyboard(is_admin=is_admin, has_team=has_team)
            else:
                keyboard = keyboards.get_main_menu_keyboard(is_admin=False, has_team=False)
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboard)
        return

    report_text = message.text.strip()

    if len(report_text) < 20:
        await message.answer(
            "‚ùå –û—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    if len(report_text) > 4000:
        await message.answer(
            "‚ùå –û—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(report_text=report_text)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç —Å—Ä–∞–∑—É
    student = db.student_get_by_tg_id(message.from_user.id)
    data = await state.get_data()
    is_editing = data.get('editing', False)

    try:
        db.report_create_or_update(
            student_id=student['student_id'],
            sprint_num=data['sprint_num'],
            report_text=report_text
        )

        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        if is_editing:
            await message.answer(
                f"‚úÖ *–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n"
                f"üìä –°–ø—Ä–∏–Ω—Ç: ‚Ññ{data['sprint_num']}\n"
                f"üìÖ –î–∞—Ç–∞: {helpers.format_datetime('now')}",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                f"‚úÖ *–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*\n\n"
                f"üìä –°–ø—Ä–∏–Ω—Ç: ‚Ññ{data['sprint_num']}\n"
                f"üìÖ –î–∞—Ç–∞: {helpers.format_datetime('now')}",
                parse_mode="Markdown"
            )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ú–æ–∏ –æ—Ç—á—ë—Ç—ã"
        reports = db.report_get_by_student(student['student_id'])
        report_text = helpers.format_reports_list(reports)
        keyboard = inline_keyboards.get_report_management_keyboard(reports)
        await message.answer(report_text, parse_mode="Markdown", reply_markup=keyboard)

    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e!s}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        await state.clear()


def register_reports_handlers(dp: aiogram.Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç—á–µ—Ç–æ–≤"""
    # FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –†–ï–ì–ò–°–¢–†–ò–†–£–Æ–¢–°–Ø –ü–ï–†–í–´–ú–ò
    dp.message.register(process_report_text, states.ReportCreation.report_text)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –ü–û–°–õ–ï FSM)
    dp.message.register(handle_my_reports, F.text == "–ú–æ–∏ –æ—Ç—á—ë—Ç—ã")
    dp.message.register(handle_send_report, F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç")
