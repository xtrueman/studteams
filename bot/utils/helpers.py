"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞.

–°–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
"""

import uuid
import secrets
import string

def generate_invite_code(length: int = 8) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    alphabet = string.ascii_uppercase + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def format_team_info(team_data, members_data) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""
    if not team_data:
        return "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    text = f"üë• *{team_data['team_name']}*\n"
    text += f"üì± –ü—Ä–æ–¥—É–∫—Ç: {team_data['product_name']}\n"
    text += f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {team_data['admin']['name']}\n\n"
    
    if members_data:
        text += "*–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã:*\n"
        for i, member in enumerate(members_data, 1):
            role_icon = "üëë" if member['student']['id'] == team_data['admin']['id'] else "üë§"
            text += f"{i}. {role_icon} {member['student']['name']} - {member['role']}\n"
    else:
        text += "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n"
    
    return text

def format_reports_list(reports) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    if not reports:
        return "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤"
    
    text = "üìã *–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã:*\n\n"
    for report in reports:
        date_str = report['report_date'].strftime("%d.%m.%Y %H:%M")
        text += f"*–°–ø—Ä–∏–Ω—Ç ‚Ññ{report['sprint_num']}*\n"
        text += f"üìÖ {date_str}\n"
        text += f"üìù {report['report_text'][:100]}{'...' if len(report['report_text']) > 100 else ''}\n\n"
    
    return text

def format_ratings_list(ratings) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ü–µ–Ω–æ–∫"""
    if not ratings:
        return "‚≠ê –í–∞—Å –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª"
    
    text = "‚≠ê *–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:*\n\n"
    for rating in ratings:
        date_str = rating['rate_date'].strftime("%d.%m.%Y")
        text += f"üë§ *{rating['assessor']['name']}*\n"
        text += f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating['overall_rating']}/10\n"
        text += f"‚úÖ –ü–ª—é—Å—ã: {rating['advantages']}\n"
        text += f"üìà –ß—Ç–æ —É–ª—É—á—à–∏—Ç—å: {rating['disadvantages']}\n"
        text += f"üìÖ {date_str}\n\n"
    
    return text

def extract_sprint_number(text: str) -> int | None:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–ø—Ä–∏–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        if "–°–ø—Ä–∏–Ω—Ç ‚Ññ" in text:
            return int(text.split("‚Ññ")[1])
    except (ValueError, IndexError):
        pass
    return None

def validate_rating(text: str) -> int | None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏"""
    try:
        rating = int(text)
        if 1 <= rating <= 10:
            return rating
    except ValueError:
        pass
    return None

def is_valid_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏"""
    return len(name.strip()) >= 2 and len(name.strip()) <= 64

def is_valid_team_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    return len(name.strip()) >= 3 and len(name.strip()) <= 64

def is_valid_product_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    return len(name.strip()) >= 3 and len(name.strip()) <= 100

def is_valid_group_number(group: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    return len(group.strip()) >= 2 and len(group.strip()) <= 16

def format_datetime(dt) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    import datetime
    if dt == 'now':
        dt = datetime.datetime.now()
    return dt.strftime("%d.%m.%Y %H:%M")