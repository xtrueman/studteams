"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ StudHelper.

–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö –æ–±—â–∏—Ö –∑–∞–¥–∞—á.
"""

import datetime
import random
import string

# import bot.database.queries as queries
import bot.db as db
import config


def is_valid_team_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    return 3 <= len(name) <= 64


def is_valid_product_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    return 3 <= len(name) <= 100


def is_valid_group_number(group: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    return 2 <= len(group) <= 16


def extract_sprint_number(text: str) -> int | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Å–ø—Ä–∏–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if text.startswith("–°–ø—Ä–∏–Ω—Ç ‚Ññ"):
        try:
            return int(text.split("‚Ññ")[1])
        except (ValueError, IndexError):
            return None
    return None


def generate_invite_code(length: int = 8) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    characters = string.ascii_uppercase + string.digits
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã: 0, O, I, l
    characters = characters.replace('0', '').replace('O', '').replace('I', '').replace('l', '')
    return ''.join(random.choice(characters) for _ in range(length))


def format_datetime(dt: str | datetime.datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if dt == "now":
        dt = datetime.datetime.now()
    elif isinstance(dt, str):
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ datetime
        try:
            dt = datetime.datetime.fromisoformat(dt)
        except ValueError:
            return dt  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    return dt.strftime("%d.%m.%Y %H:%M")


def format_reports_list(reports: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not reports:
        return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤."

    text = "*–ú–æ–∏ –æ—Ç—á—ë—Ç—ã:*\n\n"
    for report in reports:
        # For MySQL version, dates might be strings, so we handle them appropriately
        date_str = report.get('report_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if isinstance(date_str, datetime.datetime):
            date_str = format_datetime(date_str)
        
        text += f"üìä –°–ø—Ä–∏–Ω—Ç ‚Ññ{report['sprint_num']} ({date_str})\n"
        # Truncate report text for preview
        preview = report['report_text'][:100] + "..." if len(report['report_text']) > 100 else report['report_text']
        text += f"{preview}\n\n"

    return text


def format_team_info(team: dict, all_members: list, invite_link_text: str | None = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    team_info = (
        f"üë• *–ö–æ–º–∞–Ω–¥–∞: {team['team_name']}*\n"
        f"üì± –ü—Ä–æ–¥—É–∫—Ç: {team['product_name']}\n"
        f"üîó –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{team['invite_code']}`\n\n"
    )

    if invite_link_text:
        team_info += invite_link_text + "\n"

    team_info += "*–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã:*\n"
    for member in all_members:
        # Handle both object attributes and dictionary access
        if hasattr(member, 'role'):
            role = member.role
        elif isinstance(member, dict) and 'role' in member:
            role = member['role']
        else:
            role = '–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã'
            
        # Handle student name access
        if hasattr(member, 'student') and hasattr(member.student, 'name'):
            name = member.student.name
        elif isinstance(member, dict) and 'name' in member:
            name = member['name']
        else:
            name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
        team_info += f"‚Ä¢ {name} ({role})\n"

    return team_info


async def get_team_display_data(student_id: str | None, tg_id: int,
                                bot_username: str | None = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""
    # import bot.database.queries as queries
    import bot.keyboards.inline as inline_keyboards

    student = db.get_student_by_tg_id(tg_id)

    if not student or 'team' not in student:
        return None

    team = student['team']

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    teammates = db.get_teammates(student['student_id'])

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    class MockStudent:
        def __init__(self, student_obj):
            self.id = student_obj['student_id']
            self.name = student_obj['name']

    class MockMembership:
        def __init__(self, student_obj, role):
            self.student = MockStudent(student_obj)
            self.role = role

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º teammate –æ–±—ä–µ–∫—Ç—ã –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    teammate_memberships = []
    for teammate in teammates:
        role = teammate.get('role', '–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã')
        teammate_memberships.append(MockMembership(teammate, role))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º—ã –±–µ—Ä–µ–º —Ä–æ–ª—å –∏–∑ team_memberships –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    current_user_role = 'Scrum Master' if team['admin_student_id'] == student['student_id'] else '–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã'
    all_members = [*teammate_memberships, MockMembership(student, current_user_role)]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin = team['admin_student_id'] == student['student_id']

    # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    invite_link_text = None
    if is_admin and bot_username:
        invite_link_text = get_invite_link_text(team['team_name'], team['invite_code'], bot_username)

    team_info = format_team_info(team, all_members, invite_link_text)

    # –î–æ–±–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    keyboard = inline_keyboards.get_team_member_management_keyboard(
        all_members, student['student_id'], is_admin
    )

    return {
        'team_info': team_info,
        'keyboard': keyboard,
        'is_admin': is_admin,
        'team': team,
        'all_members': all_members
    }


def get_invite_link_text(team_name: str, invite_code: str, bot_username: str | None,
                         show_instruction: bool = False) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —Å—Å—ã–ª–∫–æ–π-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º"""
    invite_url = f"https://t.me/{bot_username}?start={invite_code}"
    base_text = (
        f"\nüîó *–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:*\n"
        f"`{invite_url}`\n"
    )

    if show_instruction:
        base_text += "\n\nüì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."

    return base_text