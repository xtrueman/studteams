"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞.

–°–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
"""

import secrets
import string


def generate_invite_code(length: int = 8) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    alphabet = string.ascii_uppercase + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))


def format_team_info(team_data, members_data, invite_link_text: str | None = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""
    if not team_data:
        return "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    text = f"üë• *{team_data.team_name}*\n"
    text += f"üì± –ü—Ä–æ–¥—É–∫—Ç: {team_data.product_name}\n"
    text += f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {team_data.admin.name}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if invite_link_text:
        text += invite_link_text
    text += "\n"

    if members_data:
        text += "*–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã:*\n"
        for i, member in enumerate(members_data, 1):
            role_icon = "üëë" if member.student.id == team_data.admin.id else "üë§"
            text += f"{i}. {role_icon} {member.student.name} ‚Äî {member.role}\n"
    else:
        text += "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n"

    return text


def format_reports_list(reports) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    if not reports:
        return "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤"

    text = "üìã *–û—Ç—á—ë—Ç—ã –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:*\n\n"
    for report in reports:
        text += f"*–°–ø—Ä–∏–Ω—Ç ‚Ññ{report.sprint_num}:*\n"
        text += f"_{report.report_text}_\n\n"

    return text


# ... existing code ...


def extract_sprint_number(text: str) -> int | None:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–ø—Ä–∏–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        if "–°–ø—Ä–∏–Ω—Ç ‚Ññ" in text:
            return int(text.split("‚Ññ")[1])
    except (ValueError, IndexError):
        pass
    return None


def validate_rating(text: str) -> int | None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏"""
    try:
        rating = int(text)
        if 1 <= rating <= 10:
            return rating
    except ValueError:
        pass
    return None


# ... existing code ...


def is_valid_team_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    return len(name.strip()) >= 3 and len(name.strip()) <= 64


def is_valid_product_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    return len(name.strip()) >= 3 and len(name.strip()) <= 100


def is_valid_group_number(group: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    return len(group.strip()) >= 2 and len(group.strip()) <= 16


def format_datetime(dt) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    import datetime
    if dt == 'now':
        dt = datetime.datetime.now(datetime.UTC)
    return dt.strftime("%d.%m.%Y %H:%M")


async def get_team_display_data(student_id: str | None, tg_id: int,
                                bot_username: str | None = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""
    import bot.database.queries as queries
    import bot.keyboards.inline as inline_keyboards

    student = await queries.StudentQueries.get_by_tg_id(tg_id)

    if not student or not getattr(student, 'team_memberships', None):
        return None

    team_membership = student.team_memberships[0]
    team = team_membership.team

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    teammates = await queries.StudentQueries.get_teammates(student.id)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    class MockStudent:
        def __init__(self, student_obj):
            self.id = student_obj.id
            self.name = student_obj.name

    class MockMembership:
        def __init__(self, student_obj, role):
            self.student = MockStudent(student_obj)
            self.role = role

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º teammate –æ–±—ä–µ–∫—Ç—ã –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    teammate_memberships = []
    for teammate in teammates:
        role = teammate.team_memberships[0].role if teammate.team_memberships else "–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã"
        teammate_memberships.append(MockMembership(teammate, role))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_members = [*teammate_memberships, MockMembership(student, team_membership.role)]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin = team.admin.id == student.id

    # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    invite_link_text = None
    if is_admin and bot_username:
        invite_link_text = get_invite_link_text(team.team_name, team.invite_code, bot_username)

    team_info = format_team_info(team, all_members, invite_link_text)

    # –î–æ–±–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    keyboard = inline_keyboards.get_team_member_management_keyboard(
        all_members, student.id, is_admin
    )

    return {
        'team_info': team_info,
        'keyboard': keyboard,
        'is_admin': is_admin,
        'team': team,
        'all_members': all_members
    }


def get_invite_link_text(team_name: str, invite_code: str, bot_username: str | None,
                         show_instruction: bool = False) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —Å—Å—ã–ª–∫–æ–π-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º"""
    invite_url = f"https://t.me/{bot_username}?start={invite_code}"
    base_text = (
        f"\nüîó *–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:*\n"
        f"`{invite_url}`\n"
    )

    if show_instruction:
        base_text += "\n\nüì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."

    return base_text
